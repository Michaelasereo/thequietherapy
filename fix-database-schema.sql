-- Fix database schema for production launch
-- Add missing columns for AI notes and session management

-- Add AI notes tracking column
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS ai_notes_generated BOOLEAN DEFAULT FALSE;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS ai_notes_generated_at TIMESTAMP WITH TIME ZONE;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS ai_provider VARCHAR(50);

-- Add session processing columns
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS processing_status VARCHAR(20) DEFAULT 'pending';
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS processing_started_at TIMESTAMP WITH TIME ZONE;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS processing_completed_at TIMESTAMP WITH TIME ZONE;

-- Add recording columns
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS recording_started_at TIMESTAMP WITH TIME ZONE;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS recording_duration INTEGER; -- in seconds
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS recording_file_size BIGINT; -- in bytes

-- Add session notes table if it doesn't exist
CREATE TABLE IF NOT EXISTS session_notes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    therapist_id UUID NOT NULL REFERENCES therapists(id),
    user_id UUID NOT NULL REFERENCES users(id),
    notes TEXT,
    soap_notes JSONB,
    transcript TEXT,
    mood_rating INTEGER CHECK (mood_rating >= 1 AND mood_rating <= 10),
    progress_notes TEXT,
    homework_assigned TEXT,
    next_session_focus TEXT,
    ai_generated BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_session_notes_session_id ON session_notes(session_id);
CREATE INDEX IF NOT EXISTS idx_session_notes_therapist_id ON session_notes(therapist_id);
CREATE INDEX IF NOT EXISTS idx_session_notes_user_id ON session_notes(user_id);
CREATE INDEX IF NOT EXISTS idx_session_notes_ai_generated ON session_notes(ai_generated);

-- Add session processing errors table
CREATE TABLE IF NOT EXISTS session_processing_errors (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    recording_id VARCHAR(255),
    error_message TEXT NOT NULL,
    error_type VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS policies for session_notes
ALTER TABLE session_notes ENABLE ROW LEVEL SECURITY;

-- Therapists can see their own session notes
CREATE POLICY "Therapists can view their session notes" ON session_notes
    FOR SELECT USING (therapist_id = auth.uid()::text);

-- Users can see their own session notes
CREATE POLICY "Users can view their session notes" ON session_notes
    FOR SELECT USING (user_id = auth.uid()::text);

-- Therapists can insert/update their session notes
CREATE POLICY "Therapists can manage their session notes" ON session_notes
    FOR ALL USING (therapist_id = auth.uid()::text);

-- Add RLS policies for session_processing_errors
ALTER TABLE session_processing_errors ENABLE ROW LEVEL SECURITY;

-- Only therapists can see processing errors for their sessions
CREATE POLICY "Therapists can view processing errors" ON session_processing_errors
    FOR SELECT USING (
        session_id IN (
            SELECT id FROM sessions WHERE therapist_id = auth.uid()::text
        )
    );

-- Update existing sessions to have proper defaults
UPDATE sessions SET 
    ai_notes_generated = FALSE,
    processing_status = 'pending'
WHERE ai_notes_generated IS NULL;

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add trigger for session_notes
DROP TRIGGER IF EXISTS update_session_notes_updated_at ON session_notes;
CREATE TRIGGER update_session_notes_updated_at
    BEFORE UPDATE ON session_notes
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Add comments for documentation
COMMENT ON TABLE session_notes IS 'Stores session notes, SOAP notes, and AI-generated content';
COMMENT ON TABLE session_processing_errors IS 'Tracks errors in AI processing of session recordings';
COMMENT ON COLUMN sessions.ai_notes_generated IS 'Whether AI has generated notes for this session';
COMMENT ON COLUMN sessions.processing_status IS 'Status of AI processing: pending, processing, completed, error';
COMMENT ON COLUMN session_notes.soap_notes IS 'JSON structure containing SOAP notes (subjective, objective, assessment, plan)';
COMMENT ON COLUMN session_notes.mood_rating IS 'Patient mood rating from 1-10';
COMMENT ON COLUMN session_notes.ai_generated IS 'Whether these notes were generated by AI';
