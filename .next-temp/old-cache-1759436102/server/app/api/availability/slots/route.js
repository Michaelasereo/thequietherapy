/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/availability/slots/route";
exports.ids = ["app/api/availability/slots/route"];
exports.modules = {

/***/ "(rsc)/./app/api/availability/slots/route.ts":
/*!*********************************************!*\
  !*** ./app/api/availability/slots/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_availability_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/availability-service */ \"(rsc)/./lib/availability-service.ts\");\n\n\n\n/**\n * Get available time slots for a specific date\n * Supports both NEW weekly availability system and OLD template system\n */ async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const therapistId = searchParams.get('therapist_id');\n        const date = searchParams.get('date');\n        console.log('üîç Availability Slots API Called:', {\n            therapistId,\n            date\n        });\n        if (!therapistId || !date) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Therapist ID and date are required'\n            }, {\n                status: 400\n            });\n        }\n        // Validate date format\n        const dateObj = new Date(date);\n        if (isNaN(dateObj.getTime())) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid date format. Use YYYY-MM-DD format.'\n            }, {\n                status: 400\n            });\n        }\n        // Get day of week (0 = Sunday, 1 = Monday, etc.)\n        const dayOfWeek = new Date(date).getDay();\n        const dayNames = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        const dayName = dayNames[dayOfWeek];\n        console.log('üìÖ Day Calculation:', {\n            date,\n            dayOfWeek,\n            dayName\n        });\n        // Use AvailabilityService to get therapist availability (handles both new and old formats)\n        const weeklyAvailability = await _lib_availability_service__WEBPACK_IMPORTED_MODULE_2__.AvailabilityService.getTherapistAvailability(therapistId);\n        console.log('üìä AvailabilityService Result:', weeklyAvailability);\n        let availableSlots = [];\n        if (weeklyAvailability && weeklyAvailability.standardHours && weeklyAvailability.standardHours[dayName]) {\n            console.log(`‚úÖ Using availability for ${dayName}:`, weeklyAvailability.standardHours[dayName]);\n            availableSlots = generateSlotsFromWeeklyAvailability(weeklyAvailability, dayName, date);\n        } else {\n            console.log(`‚ùå No availability found for ${dayName}`);\n            console.log('üîç Full weekly availability structure:', JSON.stringify(weeklyAvailability, null, 2));\n        }\n        console.log('üéØ Generated Available Slots:', availableSlots);\n        // Check for overrides (unavailable dates)\n        const { data: overrides } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from('availability_overrides').select('*').eq('therapist_id', therapistId).eq('date', date).eq('is_active', true);\n        console.log('üö´ Availability Overrides:', overrides);\n        // Filter out slots that are overridden\n        if (overrides && overrides.length > 0) {\n            const override = overrides[0];\n            if (override.override_type === 'unavailable') {\n                availableSlots = []; // Completely unavailable\n            } else if (override.custom_hours) {\n                // Apply custom hours override\n                availableSlots = filterSlotsByCustomHours(availableSlots, override.custom_hours);\n            }\n        }\n        // Check existing bookings for this date\n        const { data: existingBookings } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from('sessions').select('session_date, session_time').eq('therapist_id', therapistId).eq('session_date', date).in('status', [\n            'scheduled',\n            'confirmed'\n        ]);\n        console.log('üìÖ Existing Bookings:', existingBookings);\n        // Remove already booked slots\n        if (existingBookings && existingBookings.length > 0) {\n            availableSlots = availableSlots.filter((slot)=>{\n                const isBooked = existingBookings.some((booking)=>booking.session_time === slot.start_time);\n                return !isBooked;\n            });\n        }\n        console.log('‚úÖ Final Available Slots:', availableSlots.length);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            date,\n            therapist_id: therapistId,\n            slots: availableSlots,\n            total_slots: availableSlots.length,\n            source: 'availability_service',\n            message: availableSlots.length > 0 ? 'Available slots found' : 'No available slots for this date'\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error('‚ùå Availability slots error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to generate slots from new weekly availability format\nfunction generateSlotsFromWeeklyAvailability(weeklyAvailability, dayName, date) {\n    const slots = [];\n    try {\n        const dayAvailability = weeklyAvailability.standardHours[dayName];\n        if (!dayAvailability || !dayAvailability.enabled) {\n            console.log(`‚ùå Day ${dayName} not enabled in weekly availability`);\n            return [];\n        }\n        console.log(`‚úÖ Processing ${dayName} availability:`, dayAvailability);\n        // Check if generalHours is available (new format) - use it first\n        if (dayAvailability.generalHours && dayAvailability.generalHours.start && dayAvailability.generalHours.end) {\n            console.log(`üïê Using generalHours for ${dayName}:`, dayAvailability.generalHours);\n            const startTime = dayAvailability.generalHours.start;\n            const endTime = dayAvailability.generalHours.end;\n            const sessionDuration = dayAvailability.generalHours.sessionDuration || weeklyAvailability.sessionSettings?.sessionDuration || 60;\n            // Generate time slots from generalHours\n            const generatedSlots = generateTimeSlots(startTime, endTime, sessionDuration, date);\n            slots.push(...generatedSlots);\n        } else {\n            // Fallback to timeSlots (old format)\n            console.log(`üïê Using timeSlots for ${dayName} (fallback)`);\n            for (const timeSlot of dayAvailability.timeSlots){\n                if (timeSlot.type !== 'available' && timeSlot.type !== 'individual') continue;\n                const startTime = timeSlot.start;\n                const endTime = timeSlot.end;\n                // Get session duration from settings (default to 60 minutes)\n                const sessionDuration = weeklyAvailability.sessionSettings?.sessionDuration || 60;\n                // Generate time slots\n                const generatedSlots = generateTimeSlots(startTime, endTime, sessionDuration, date);\n                slots.push(...generatedSlots);\n            }\n        }\n    } catch (error) {\n        console.error('‚ùå Error generating slots from weekly availability:', error);\n    }\n    return slots;\n}\n// Helper function to generate slots from old template format\nfunction generateSlotsFromTemplates(templateAvailability, date) {\n    const slots = [];\n    for (const template of templateAvailability){\n        const startTime = template.start_time;\n        const endTime = template.end_time;\n        const sessionDuration = template.session_duration || 50;\n        const generatedSlots = generateTimeSlots(startTime, endTime, sessionDuration, date);\n        slots.push(...generatedSlots);\n    }\n    return slots;\n}\n// Helper function to generate time slots\nfunction generateTimeSlots(startTime, endTime, duration, date) {\n    const slots = [];\n    const start = new Date(`${date}T${startTime}`);\n    const end = new Date(`${date}T${endTime}`);\n    let current = new Date(start);\n    while(current < end){\n        const slotEnd = new Date(current.getTime() + duration * 60000);\n        if (slotEnd <= end) {\n            const timeString = current.toTimeString().slice(0, 5); // \"HH:MM\" format\n            const endTimeString = slotEnd.toTimeString().slice(0, 5);\n            slots.push({\n                date: date,\n                day_of_week: new Date(date).getDay(),\n                start_time: timeString,\n                end_time: endTimeString,\n                session_duration: duration,\n                session_type: 'individual',\n                max_sessions: 1,\n                is_available: true,\n                is_override: false\n            });\n        }\n        // Move to next slot\n        current = new Date(slotEnd.getTime());\n    }\n    return slots;\n}\n// Helper function to filter slots by custom hours\nfunction filterSlotsByCustomHours(slots, customHours) {\n    return slots.filter((slot)=>{\n        // Implement custom hours filtering logic\n        // This would depend on your custom_hours JSON structure\n        return true; // Placeholder - implement based on your override structure\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/availability/slots/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/availability-service.ts":
/*!*************************************!*\
  !*** ./lib/availability-service.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvailabilityService: () => (/* binding */ AvailabilityService)\n/* harmony export */ });\n/* harmony import */ var _types_availability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/availability */ \"(rsc)/./types/availability.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/**\n * Availability Service\n * \n * This service handles data transformation, validation, and management\n * for the 3-level availability system. It provides backward compatibility\n * with existing database schemas while supporting the new enhanced interface.\n */ \n\nclass AvailabilityService {\n    /**\n   * Save therapist availability using the new WeeklyAvailability interface\n   */ static async saveTherapistAvailability(therapistId, availability) {\n        try {\n            // Validate availability data\n            const validation = this.validateWeeklyAvailability(availability);\n            if (!validation.isValid) {\n                return {\n                    success: false,\n                    message: `Validation failed: ${validation.errors.join(', ')}`\n                };\n            }\n            // Transform to legacy format for database storage\n            const legacyTemplates = this.transformToLegacyFormat(availability, therapistId);\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            // Delete existing templates for this therapist\n            await supabase.from('availability_templates').delete().eq('therapist_id', therapistId);\n            // Insert new templates\n            const { data: insertedTemplates, error: insertError } = await supabase.from('availability_templates').insert(legacyTemplates).select();\n            if (insertError) {\n                console.error('Error inserting templates:', insertError);\n                return {\n                    success: false,\n                    message: 'Failed to save availability templates'\n                };\n            }\n            // Store the new format in a separate table for future use\n            const { error: newFormatError } = await supabase.from('availability_weekly_schedules').upsert({\n                therapist_id: therapistId,\n                weekly_availability: availability,\n                template_name: 'primary',\n                is_active: true,\n                updated_at: new Date().toISOString()\n            });\n            if (newFormatError) {\n                console.warn('Failed to store new format, but legacy format saved:', newFormatError);\n            }\n            return {\n                success: true,\n                message: 'Availability saved successfully',\n                templateId: insertedTemplates?.[0]?.id\n            };\n        } catch (error) {\n            console.error('Error saving therapist availability:', error);\n            return {\n                success: false,\n                message: 'Internal server error'\n            };\n        }\n    }\n    /**\n   * Get therapist availability in the new format\n   */ static async getTherapistAvailability(therapistId) {\n        try {\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            // Try to get from new format first\n            const { data: newFormatData, error: newFormatError } = await supabase.from('availability_weekly_schedules').select('weekly_availability').eq('therapist_id', therapistId).eq('is_active', true).single();\n            if (!newFormatError && newFormatData?.weekly_availability) {\n                return newFormatData.weekly_availability;\n            }\n            // Fallback to legacy format\n            const { data: legacyTemplates, error: legacyError } = await supabase.from('availability_templates').select('*').eq('therapist_id', therapistId).eq('is_active', true).order('day_of_week', {\n                ascending: true\n            });\n            if (legacyError || !legacyTemplates) {\n                console.warn('No existing availability found, returning default');\n                return this.getDefaultAvailability();\n            }\n            // Transform legacy format to new format\n            return this.transformLegacyToNewFormat(legacyTemplates);\n        } catch (error) {\n            console.error('Error fetching therapist availability:', error);\n            return this.getDefaultAvailability();\n        }\n    }\n    /**\n   * Get availability overrides for a therapist\n   */ static async getAvailabilityOverrides(therapistId, startDate, endDate) {\n        try {\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            let query = supabase.from('availability_overrides').select('*').eq('therapist_id', therapistId);\n            if (startDate) {\n                query = query.gte('override_date', startDate);\n            }\n            if (endDate) {\n                query = query.lte('override_date', endDate);\n            }\n            const { data: overrides, error } = await query.order('override_date', {\n                ascending: true\n            });\n            if (error) {\n                console.error('Error fetching overrides:', error);\n                return [];\n            }\n            return (overrides || []).map((override)=>this.transformLegacyOverride(override));\n        } catch (error) {\n            console.error('Error fetching availability overrides:', error);\n            return [];\n        }\n    }\n    /**\n   * Save availability override\n   */ static async saveAvailabilityOverride(therapistId, override) {\n        try {\n            const legacyOverride = this.transformNewOverrideToLegacy(override, therapistId);\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            const { data: insertedOverride, error } = await supabase.from('availability_overrides').upsert(legacyOverride).select().single();\n            if (error) {\n                console.error('Error saving override:', error);\n                return {\n                    success: false,\n                    message: 'Failed to save availability override'\n                };\n            }\n            return {\n                success: true,\n                message: 'Override saved successfully',\n                override: this.transformLegacyOverride(insertedOverride)\n            };\n        } catch (error) {\n            console.error('Error saving availability override:', error);\n            return {\n                success: false,\n                message: 'Internal server error'\n            };\n        }\n    }\n    /**\n   * Transform new WeeklyAvailability format to legacy database format\n   */ static transformToLegacyFormat(availability, therapistId) {\n        const days = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        const templates = [];\n        days.forEach((day, index)=>{\n            const dayAvailability = availability.standardHours[day];\n            if (dayAvailability.enabled && dayAvailability.timeSlots.length > 0) {\n                dayAvailability.timeSlots.forEach((slot)=>{\n                    templates.push({\n                        therapist_id: therapistId,\n                        day_of_week: index,\n                        start_time: slot.start,\n                        end_time: slot.end,\n                        session_duration: slot.duration,\n                        session_type: slot.type,\n                        max_sessions: slot.maxSessions,\n                        is_active: true\n                    });\n                });\n            }\n        });\n        return templates;\n    }\n    /**\n   * Transform legacy database format to new WeeklyAvailability format\n   */ static transformLegacyToNewFormat(legacyTemplates) {\n        const availability = {\n            ..._types_availability__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_WEEKLY_AVAILABILITY\n        };\n        const days = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        // Group templates by day\n        const templatesByDay = legacyTemplates.reduce((acc, template)=>{\n            const dayName = days[template.day_of_week];\n            if (!acc[dayName]) {\n                acc[dayName] = [];\n            }\n            acc[dayName].push(template);\n            return acc;\n        }, {});\n        // Transform each day\n        days.forEach((dayName)=>{\n            const dayTemplates = templatesByDay[dayName] || [];\n            const dayAvailability = {\n                enabled: dayTemplates.length > 0,\n                timeSlots: dayTemplates.map((template)=>({\n                        id: template.id || `slot-${Date.now()}-${Math.random()}`,\n                        start: template.start_time,\n                        end: template.end_time,\n                        duration: template.session_duration || 60,\n                        type: template.session_type || 'individual',\n                        maxSessions: template.max_sessions || 1,\n                        title: `${template.session_type || 'Individual'} Session`,\n                        isAvailable: template.is_active !== false\n                    })),\n                breaks: [],\n                notes: ''\n            };\n            availability.standardHours[dayName] = dayAvailability;\n        });\n        return availability;\n    }\n    /**\n   * Transform legacy override to new format\n   */ static transformLegacyOverride(legacyOverride) {\n        return {\n            id: legacyOverride.id,\n            therapistId: legacyOverride.therapist_id,\n            date: legacyOverride.override_date,\n            type: legacyOverride.is_available ? 'custom_hours' : 'unavailable',\n            isAvailable: legacyOverride.is_available,\n            customHours: legacyOverride.is_available ? {\n                start: legacyOverride.start_time,\n                end: legacyOverride.end_time,\n                timeSlots: [\n                    {\n                        id: `override-${legacyOverride.id}`,\n                        start: legacyOverride.start_time,\n                        end: legacyOverride.end_time,\n                        duration: legacyOverride.session_duration || 60,\n                        type: legacyOverride.session_type || 'individual',\n                        maxSessions: legacyOverride.max_sessions || 1,\n                        title: 'Override Session',\n                        isAvailable: true\n                    }\n                ]\n            } : undefined,\n            reason: legacyOverride.reason || '',\n            notes: legacyOverride.notes,\n            createdAt: legacyOverride.created_at,\n            updatedAt: legacyOverride.updated_at\n        };\n    }\n    /**\n   * Transform new override to legacy format\n   */ static transformNewOverrideToLegacy(override, therapistId) {\n        return {\n            therapist_id: therapistId,\n            override_date: override.date,\n            is_available: override.isAvailable,\n            start_time: override.customHours?.start,\n            end_time: override.customHours?.end,\n            session_duration: override.customHours?.timeSlots?.[0]?.duration || 60,\n            session_type: override.customHours?.timeSlots?.[0]?.type || 'individual',\n            max_sessions: override.customHours?.timeSlots?.[0]?.maxSessions || 1,\n            reason: override.reason,\n            notes: override.notes,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    }\n    /**\n   * Validate WeeklyAvailability data\n   */ static validateWeeklyAvailability(availability) {\n        const errors = [];\n        const warnings = [];\n        // Check required fields\n        if (!availability.standardHours) {\n            errors.push('Standard hours are required');\n        }\n        if (!availability.sessionSettings) {\n            errors.push('Session settings are required');\n        }\n        // Validate each day\n        const days = Object.keys(availability.standardHours);\n        days.forEach((day)=>{\n            const dayAvailability = availability.standardHours[day];\n            if (dayAvailability.enabled && dayAvailability.timeSlots.length === 0) {\n                warnings.push(`${day} is enabled but has no time slots`);\n            }\n            // Validate time slots\n            dayAvailability.timeSlots.forEach((slot, index)=>{\n                if (!slot.start || !slot.end) {\n                    errors.push(`${day} slot ${index + 1} is missing start or end time`);\n                }\n                if (slot.duration <= 0) {\n                    errors.push(`${day} slot ${index + 1} has invalid duration`);\n                }\n                if (slot.maxSessions <= 0) {\n                    errors.push(`${day} slot ${index + 1} has invalid max sessions`);\n                }\n            });\n        });\n        // Validate session settings\n        if (availability.sessionSettings.sessionDuration <= 0) {\n            errors.push('Session duration must be greater than 0');\n        }\n        if (availability.sessionSettings.bufferTime < 0) {\n            errors.push('Buffer time cannot be negative');\n        }\n        if (availability.sessionSettings.maxSessionsPerDay <= 0) {\n            errors.push('Max sessions per day must be greater than 0');\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n   * Get default availability configuration\n   */ static getDefaultAvailability() {\n        return {\n            ..._types_availability__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_WEEKLY_AVAILABILITY\n        };\n    }\n    /**\n   * Calculate end time from start time and duration\n   */ static calculateEndTime(startTime, durationMinutes) {\n        const [hours, minutes] = startTime.split(':').map(Number);\n        const startDate = new Date();\n        startDate.setHours(hours, minutes, 0, 0);\n        const endDate = new Date(startDate.getTime() + durationMinutes * 60000);\n        return endDate.toTimeString().slice(0, 5);\n    }\n    /**\n   * Generate time slots for a day based on start/end times and session duration\n   */ static generateTimeSlots(startTime, endTime, sessionDuration, bufferTime = 0) {\n        const slots = [];\n        const [startHour, startMinute] = startTime.split(':').map(Number);\n        const [endHour, endMinute] = endTime.split(':').map(Number);\n        const startMinutes = startHour * 60 + startMinute;\n        const endMinutes = endHour * 60 + endMinute;\n        const totalDuration = sessionDuration + bufferTime;\n        let currentMinutes = startMinutes;\n        let slotIndex = 1;\n        while(currentMinutes + sessionDuration <= endMinutes){\n            const slotStart = this.formatMinutesToTime(currentMinutes);\n            const slotEnd = this.formatMinutesToTime(currentMinutes + sessionDuration);\n            slots.push({\n                ..._types_availability__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIME_SLOT,\n                id: `slot-${Date.now()}-${slotIndex}`,\n                start: slotStart,\n                end: slotEnd,\n                duration: sessionDuration,\n                title: `Session ${slotIndex}`\n            });\n            currentMinutes += totalDuration;\n            slotIndex++;\n        }\n        return slots;\n    }\n    /**\n   * Format minutes to HH:MM time string\n   */ static formatMinutesToTime(minutes) {\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n    }\n    /**\n   * Check if two time slots overlap\n   */ static doTimeSlotsOverlap(slot1, slot2) {\n        const start1 = this.timeToMinutes(slot1.start);\n        const end1 = this.timeToMinutes(slot1.end);\n        const start2 = this.timeToMinutes(slot2.start);\n        const end2 = this.timeToMinutes(slot2.end);\n        return start1 < end2 && start2 < end1;\n    }\n    /**\n   * Convert time string to minutes\n   */ static timeToMinutes(time) {\n        const [hours, minutes] = time.split(':').map(Number);\n        return hours * 60 + minutes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/availability-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerClient: () => (/* binding */ createServerClient),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n// Client-side Supabase client with real-time disabled to prevent WebSocket errors\nconst supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(supabaseUrl, supabaseAnonKey, {\n    realtime: {\n        enabled: false\n    }\n});\n// Server-side Supabase client with service role key\nconst createServerClient = ()=>{\n    const serverSupabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\n    // Use anon key as fallback if service role key is invalid\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n    console.log('üîç createServerClient: Service role key exists:', !!serviceRoleKey);\n    console.log('üîç createServerClient: Service role key length:', serviceRoleKey?.length);\n    console.log('üîç createServerClient: Anon key length:', anonKey?.length);\n    // Use service role key if available, otherwise fallback to anon key\n    const serverSupabaseKey = serviceRoleKey || anonKey;\n    console.log('üîç createServerClient: Using key type:', serviceRoleKey ? 'service_role' : 'anon');\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(serverSupabaseUrl, serverSupabaseKey, {\n        auth: {\n            persistSession: false\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Favailability%2Fslots%2Froute&page=%2Fapi%2Favailability%2Fslots%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Favailability%2Fslots%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Favailability%2Fslots%2Froute&page=%2Fapi%2Favailability%2Fslots%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Favailability%2Fslots%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_macbook_Desktop_trpi_app_app_api_availability_slots_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/availability/slots/route.ts */ \"(rsc)/./app/api/availability/slots/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/availability/slots/route\",\n        pathname: \"/api/availability/slots\",\n        filename: \"route\",\n        bundlePath: \"app/api/availability/slots/route\"\n    },\n    resolvedPagePath: \"/Users/macbook/Desktop/trpi-app/app/api/availability/slots/route.ts\",\n    nextConfigOutput,\n    userland: _Users_macbook_Desktop_trpi_app_app_api_availability_slots_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhdmFpbGFiaWxpdHklMkZzbG90cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYXZhaWxhYmlsaXR5JTJGc2xvdHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhdmFpbGFiaWxpdHklMkZzbG90cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1hY2Jvb2slMkZEZXNrdG9wJTJGdHJwaS1hcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGbWFjYm9vayUyRkRlc2t0b3AlMkZ0cnBpLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ21CO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvbWFjYm9vay9EZXNrdG9wL3RycGktYXBwL2FwcC9hcGkvYXZhaWxhYmlsaXR5L3Nsb3RzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXZhaWxhYmlsaXR5L3Nsb3RzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXZhaWxhYmlsaXR5L3Nsb3RzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hdmFpbGFiaWxpdHkvc2xvdHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbWFjYm9vay9EZXNrdG9wL3RycGktYXBwL2FwcC9hcGkvYXZhaWxhYmlsaXR5L3Nsb3RzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Favailability%2Fslots%2Froute&page=%2Fapi%2Favailability%2Fslots%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Favailability%2Fslots%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/availability.ts":
/*!*******************************!*\
  !*** ./types/availability.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAYS_OF_WEEK: () => (/* binding */ DAYS_OF_WEEK),\n/* harmony export */   DEFAULT_DAY_AVAILABILITY: () => (/* binding */ DEFAULT_DAY_AVAILABILITY),\n/* harmony export */   DEFAULT_SESSION_DURATIONS: () => (/* binding */ DEFAULT_SESSION_DURATIONS),\n/* harmony export */   DEFAULT_TIME_SLOT: () => (/* binding */ DEFAULT_TIME_SLOT),\n/* harmony export */   DEFAULT_WEEKLY_AVAILABILITY: () => (/* binding */ DEFAULT_WEEKLY_AVAILABILITY),\n/* harmony export */   OVERRIDE_TYPES: () => (/* binding */ OVERRIDE_TYPES),\n/* harmony export */   SESSION_TYPES: () => (/* binding */ SESSION_TYPES)\n/* harmony export */ });\n/**\n * Enhanced 3-Level Availability System Types\n * \n * This file defines the TypeScript interfaces for the comprehensive availability system\n * that supports weekly templates, specific date overrides, and real-time availability.\n */ // ============================================================================\n// CORE AVAILABILITY TYPES\n// ============================================================================\n// ============================================================================\n// CONSTANTS\n// ============================================================================\nconst DAYS_OF_WEEK = [\n    'sunday',\n    'monday',\n    'tuesday',\n    'wednesday',\n    'thursday',\n    'friday',\n    'saturday'\n];\nconst SESSION_TYPES = [\n    'individual',\n    'group',\n    'consultation'\n];\nconst OVERRIDE_TYPES = [\n    'unavailable',\n    'custom_hours',\n    'reduced_hours'\n];\nconst DEFAULT_SESSION_DURATIONS = [\n    30,\n    45,\n    60,\n    90,\n    120\n];\nconst DEFAULT_TIME_SLOT = {\n    id: '',\n    start: '09:00',\n    end: '10:00',\n    duration: 60,\n    type: 'individual',\n    maxSessions: 1,\n    title: 'Individual Therapy Session',\n    isAvailable: true\n};\nconst DEFAULT_DAY_AVAILABILITY = {\n    enabled: false,\n    customSlots: [],\n    timeSlots: [],\n    breaks: [],\n    notes: ''\n};\nconst DEFAULT_WEEKLY_AVAILABILITY = {\n    standardHours: {\n        monday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        tuesday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        wednesday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        thursday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        friday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        saturday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: false\n        },\n        sunday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: false\n        }\n    },\n    sessionSettings: {\n        sessionDuration: 60,\n        bufferTime: 15,\n        maxSessionsPerDay: 8,\n        advanceBookingDays: 30,\n        cancellationHours: 24\n    },\n    timezone: 'UTC',\n    lastUpdated: new Date().toISOString()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./types/availability.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Favailability%2Fslots%2Froute&page=%2Fapi%2Favailability%2Fslots%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Favailability%2Fslots%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();