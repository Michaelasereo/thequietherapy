/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/therapist/availability/template/route";
exports.ids = ["app/api/therapist/availability/template/route"];
exports.modules = {

/***/ "(rsc)/./app/api/therapist/availability/template/route.ts":
/*!**********************************************************!*\
  !*** ./app/api/therapist/availability/template/route.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_server_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/server-auth */ \"(rsc)/./lib/server-auth.ts\");\n/* harmony import */ var _lib_availability_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/availability-service */ \"(rsc)/./lib/availability-service.ts\");\n\n\n\n/**\n * Get availability templates for a therapist\n */ async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const therapistId = searchParams.get('therapist_id');\n        if (!therapistId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Therapist ID is required'\n            }, {\n                status: 400\n            });\n        }\n        // Get availability in new format\n        const availability = await _lib_availability_service__WEBPACK_IMPORTED_MODULE_2__.AvailabilityService.getTherapistAvailability(therapistId);\n        const overrides = await _lib_availability_service__WEBPACK_IMPORTED_MODULE_2__.AvailabilityService.getAvailabilityOverrides(therapistId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            availability,\n            overrides,\n            templates: [] // Legacy support - can be enhanced later\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error('Error in template GET API:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Create or update availability templates for a therapist\n */ async function POST(request) {\n    try {\n        // SECURE Authentication Check - only therapists can modify templates\n        const authResult = await (0,_lib_server_auth__WEBPACK_IMPORTED_MODULE_1__.requireApiAuth)([\n            'therapist'\n        ]);\n        if ('error' in authResult) {\n            return authResult.error;\n        }\n        const { session } = authResult;\n        const body = await request.json();\n        // Support both new and legacy formats\n        if (body.availability) {\n            // New format with WeeklyAvailability\n            const availability = body.availability;\n            if (!availability || !availability.standardHours || !availability.sessionSettings) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Invalid availability data. Standard hours and session settings are required.'\n                }, {\n                    status: 400\n                });\n            }\n            // Verify the therapist is updating their own availability\n            if (session.user.id !== body.therapist_id) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Unauthorized: You can only update your own availability'\n                }, {\n                    status: 403\n                });\n            }\n            // Save using the new service\n            const result = await _lib_availability_service__WEBPACK_IMPORTED_MODULE_2__.AvailabilityService.saveTherapistAvailability(body.therapist_id, availability);\n            if (!result.success) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: result.message\n                }, {\n                    status: 400\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: result.message,\n                templateId: result.templateId\n            }, {\n                status: 200\n            });\n        } else if (body.templates) {\n            // Legacy format support\n            const { therapist_id, templates } = body;\n            if (!therapist_id || !templates || !Array.isArray(templates)) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Invalid request data. therapist_id and templates array are required.'\n                }, {\n                    status: 400\n                });\n            }\n            // Verify the therapist is updating their own templates\n            if (session.user.id !== therapist_id) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Unauthorized: You can only update your own templates'\n                }, {\n                    status: 403\n                });\n            }\n            // Validate templates data\n            for (const template of templates){\n                if (!template.day_of_week || template.day_of_week < 0 || template.day_of_week > 6) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: 'Invalid day_of_week. Must be between 0 (Sunday) and 6 (Saturday).'\n                    }, {\n                        status: 400\n                    });\n                }\n                if (!template.start_time || !template.end_time) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: 'start_time and end_time are required for each template.'\n                    }, {\n                        status: 400\n                    });\n                }\n                // Validate time format and logic\n                const startTime = new Date(`2000-01-01T${template.start_time}`);\n                const endTime = new Date(`2000-01-01T${template.end_time}`);\n                if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: 'Invalid time format. Use HH:MM format.'\n                    }, {\n                        status: 400\n                    });\n                }\n                if (startTime >= endTime) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: 'Start time must be before end time.'\n                    }, {\n                        status: 400\n                    });\n                }\n            }\n            // Delete existing templates for this therapist\n            const { error: deleteError } = await supabase.from('availability_templates').delete().eq('therapist_id', therapist_id);\n            if (deleteError) {\n                console.error('Error deleting existing templates:', deleteError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Failed to update templates'\n                }, {\n                    status: 500\n                });\n            }\n            // Prepare new templates data\n            const templatesData = templates.map((template)=>({\n                    therapist_id,\n                    day_of_week: template.day_of_week,\n                    start_time: template.start_time,\n                    end_time: template.end_time,\n                    session_duration: template.session_duration || 45,\n                    session_type: template.session_type || 'individual',\n                    max_sessions: template.max_sessions || 1,\n                    is_active: true\n                }));\n            // Insert new templates\n            const { data: insertedTemplates, error: insertError } = await supabase.from('availability_templates').insert(templatesData).select();\n            if (insertError) {\n                console.error('Error inserting templates:', insertError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Failed to save templates'\n                }, {\n                    status: 500\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: 'Availability templates updated successfully',\n                templates: insertedTemplates,\n                count: insertedTemplates.length\n            }, {\n                status: 200\n            });\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid request format. Provide either availability or templates data.'\n            }, {\n                status: 400\n            });\n        }\n    } catch (error) {\n        console.error('Error in template POST API:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Update a specific template\n */ async function PUT(request) {\n    try {\n        // SECURE Authentication Check\n        const authResult = await (0,_lib_server_auth__WEBPACK_IMPORTED_MODULE_1__.requireApiAuth)([\n            'therapist'\n        ]);\n        if ('error' in authResult) {\n            return authResult.error;\n        }\n        const { session } = authResult;\n        const body = await request.json();\n        const { template_id, updates } = body;\n        if (!template_id || !updates) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'template_id and updates are required'\n            }, {\n                status: 400\n            });\n        }\n        // Verify the therapist owns this template\n        const { data: existingTemplate, error: fetchError } = await supabase.from('availability_templates').select('therapist_id').eq('id', template_id).single();\n        if (fetchError || !existingTemplate) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Template not found'\n            }, {\n                status: 404\n            });\n        }\n        if (existingTemplate.therapist_id !== session.user.id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized: You can only update your own templates'\n            }, {\n                status: 403\n            });\n        }\n        // Update the template\n        const { data: updatedTemplate, error: updateError } = await supabase.from('availability_templates').update(updates).eq('id', template_id).select().single();\n        if (updateError) {\n            console.error('Error updating template:', updateError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to update template'\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: 'Template updated successfully',\n            template: updatedTemplate\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error('Error in template PUT API:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Delete a specific template\n */ async function DELETE(request) {\n    try {\n        // SECURE Authentication Check\n        const authResult = await (0,_lib_server_auth__WEBPACK_IMPORTED_MODULE_1__.requireApiAuth)([\n            'therapist'\n        ]);\n        if ('error' in authResult) {\n            return authResult.error;\n        }\n        const { session } = authResult;\n        const { searchParams } = new URL(request.url);\n        const templateId = searchParams.get('template_id');\n        if (!templateId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'template_id is required'\n            }, {\n                status: 400\n            });\n        }\n        // Verify the therapist owns this template\n        const { data: existingTemplate, error: fetchError } = await supabase.from('availability_templates').select('therapist_id').eq('id', templateId).single();\n        if (fetchError || !existingTemplate) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Template not found'\n            }, {\n                status: 404\n            });\n        }\n        if (existingTemplate.therapist_id !== session.user.id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized: You can only delete your own templates'\n            }, {\n                status: 403\n            });\n        }\n        // Delete the template\n        const { error: deleteError } = await supabase.from('availability_templates').delete().eq('id', templateId);\n        if (deleteError) {\n            console.error('Error deleting template:', deleteError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to delete template'\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: 'Template deleted successfully'\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error('Error in template DELETE API:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/therapist/availability/template/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/availability-service.ts":
/*!*************************************!*\
  !*** ./lib/availability-service.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvailabilityService: () => (/* binding */ AvailabilityService)\n/* harmony export */ });\n/* harmony import */ var _types_availability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/availability */ \"(rsc)/./types/availability.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/**\n * Availability Service\n * \n * This service handles data transformation, validation, and management\n * for the 3-level availability system. It provides backward compatibility\n * with existing database schemas while supporting the new enhanced interface.\n */ \n\nclass AvailabilityService {\n    /**\n   * Save therapist availability using the new WeeklyAvailability interface\n   */ static async saveTherapistAvailability(therapistId, availability) {\n        try {\n            // Validate availability data\n            const validation = this.validateWeeklyAvailability(availability);\n            if (!validation.isValid) {\n                return {\n                    success: false,\n                    message: `Validation failed: ${validation.errors.join(', ')}`\n                };\n            }\n            // Transform to legacy format for database storage\n            const legacyTemplates = this.transformToLegacyFormat(availability, therapistId);\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            // Delete existing templates for this therapist\n            await supabase.from('availability_templates').delete().eq('therapist_id', therapistId);\n            // Insert new templates\n            const { data: insertedTemplates, error: insertError } = await supabase.from('availability_templates').insert(legacyTemplates).select();\n            if (insertError) {\n                console.error('Error inserting templates:', insertError);\n                return {\n                    success: false,\n                    message: 'Failed to save availability templates'\n                };\n            }\n            // Store the new format in a separate table for future use\n            const { error: newFormatError } = await supabase.from('availability_weekly_schedules').upsert({\n                therapist_id: therapistId,\n                weekly_availability: availability,\n                template_name: 'primary',\n                is_active: true,\n                updated_at: new Date().toISOString()\n            });\n            if (newFormatError) {\n                console.warn('Failed to store new format, but legacy format saved:', newFormatError);\n            }\n            return {\n                success: true,\n                message: 'Availability saved successfully',\n                templateId: insertedTemplates?.[0]?.id\n            };\n        } catch (error) {\n            console.error('Error saving therapist availability:', error);\n            return {\n                success: false,\n                message: 'Internal server error'\n            };\n        }\n    }\n    /**\n   * Get therapist availability in the new format\n   */ static async getTherapistAvailability(therapistId) {\n        try {\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            // Try to get from new format first\n            const { data: newFormatData, error: newFormatError } = await supabase.from('availability_weekly_schedules').select('weekly_availability').eq('therapist_id', therapistId).eq('is_active', true).single();\n            if (!newFormatError && newFormatData?.weekly_availability) {\n                return newFormatData.weekly_availability;\n            }\n            // Fallback to legacy format\n            const { data: legacyTemplates, error: legacyError } = await supabase.from('availability_templates').select('*').eq('therapist_id', therapistId).eq('is_active', true).order('day_of_week', {\n                ascending: true\n            });\n            if (legacyError || !legacyTemplates) {\n                console.warn('No existing availability found, returning default');\n                return this.getDefaultAvailability();\n            }\n            // Transform legacy format to new format\n            return this.transformLegacyToNewFormat(legacyTemplates);\n        } catch (error) {\n            console.error('Error fetching therapist availability:', error);\n            return this.getDefaultAvailability();\n        }\n    }\n    /**\n   * Get availability overrides for a therapist\n   */ static async getAvailabilityOverrides(therapistId, startDate, endDate) {\n        try {\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            let query = supabase.from('availability_overrides').select('*').eq('therapist_id', therapistId);\n            if (startDate) {\n                query = query.gte('override_date', startDate);\n            }\n            if (endDate) {\n                query = query.lte('override_date', endDate);\n            }\n            const { data: overrides, error } = await query.order('override_date', {\n                ascending: true\n            });\n            if (error) {\n                console.error('Error fetching overrides:', error);\n                return [];\n            }\n            return (overrides || []).map((override)=>this.transformLegacyOverride(override));\n        } catch (error) {\n            console.error('Error fetching availability overrides:', error);\n            return [];\n        }\n    }\n    /**\n   * Save availability override\n   */ static async saveAvailabilityOverride(therapistId, override) {\n        try {\n            const legacyOverride = this.transformNewOverrideToLegacy(override, therapistId);\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createServerClient)();\n            const { data: insertedOverride, error } = await supabase.from('availability_overrides').upsert(legacyOverride).select().single();\n            if (error) {\n                console.error('Error saving override:', error);\n                return {\n                    success: false,\n                    message: 'Failed to save availability override'\n                };\n            }\n            return {\n                success: true,\n                message: 'Override saved successfully',\n                override: this.transformLegacyOverride(insertedOverride)\n            };\n        } catch (error) {\n            console.error('Error saving availability override:', error);\n            return {\n                success: false,\n                message: 'Internal server error'\n            };\n        }\n    }\n    /**\n   * Transform new WeeklyAvailability format to legacy database format\n   */ static transformToLegacyFormat(availability, therapistId) {\n        const days = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        const templates = [];\n        days.forEach((day, index)=>{\n            const dayAvailability = availability.standardHours[day];\n            if (dayAvailability.enabled && dayAvailability.timeSlots.length > 0) {\n                dayAvailability.timeSlots.forEach((slot)=>{\n                    templates.push({\n                        therapist_id: therapistId,\n                        day_of_week: index,\n                        start_time: slot.start,\n                        end_time: slot.end,\n                        session_duration: slot.duration,\n                        session_type: slot.type,\n                        max_sessions: slot.maxSessions,\n                        is_active: true\n                    });\n                });\n            }\n        });\n        return templates;\n    }\n    /**\n   * Transform legacy database format to new WeeklyAvailability format\n   */ static transformLegacyToNewFormat(legacyTemplates) {\n        const availability = {\n            ..._types_availability__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_WEEKLY_AVAILABILITY\n        };\n        const days = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        // Group templates by day\n        const templatesByDay = legacyTemplates.reduce((acc, template)=>{\n            const dayName = days[template.day_of_week];\n            if (!acc[dayName]) {\n                acc[dayName] = [];\n            }\n            acc[dayName].push(template);\n            return acc;\n        }, {});\n        // Transform each day\n        days.forEach((dayName)=>{\n            const dayTemplates = templatesByDay[dayName] || [];\n            const dayAvailability = {\n                enabled: dayTemplates.length > 0,\n                timeSlots: dayTemplates.map((template)=>({\n                        id: template.id || `slot-${Date.now()}-${Math.random()}`,\n                        start: template.start_time,\n                        end: template.end_time,\n                        duration: template.session_duration || 60,\n                        type: template.session_type || 'individual',\n                        maxSessions: template.max_sessions || 1,\n                        title: `${template.session_type || 'Individual'} Session`,\n                        isAvailable: template.is_active !== false\n                    })),\n                breaks: [],\n                notes: ''\n            };\n            availability.standardHours[dayName] = dayAvailability;\n        });\n        return availability;\n    }\n    /**\n   * Transform legacy override to new format\n   */ static transformLegacyOverride(legacyOverride) {\n        return {\n            id: legacyOverride.id,\n            therapistId: legacyOverride.therapist_id,\n            date: legacyOverride.override_date,\n            type: legacyOverride.is_available ? 'custom_hours' : 'unavailable',\n            isAvailable: legacyOverride.is_available,\n            customHours: legacyOverride.is_available ? {\n                start: legacyOverride.start_time,\n                end: legacyOverride.end_time,\n                timeSlots: [\n                    {\n                        id: `override-${legacyOverride.id}`,\n                        start: legacyOverride.start_time,\n                        end: legacyOverride.end_time,\n                        duration: legacyOverride.session_duration || 60,\n                        type: legacyOverride.session_type || 'individual',\n                        maxSessions: legacyOverride.max_sessions || 1,\n                        title: 'Override Session',\n                        isAvailable: true\n                    }\n                ]\n            } : undefined,\n            reason: legacyOverride.reason || '',\n            notes: legacyOverride.notes,\n            createdAt: legacyOverride.created_at,\n            updatedAt: legacyOverride.updated_at\n        };\n    }\n    /**\n   * Transform new override to legacy format\n   */ static transformNewOverrideToLegacy(override, therapistId) {\n        return {\n            therapist_id: therapistId,\n            override_date: override.date,\n            is_available: override.isAvailable,\n            start_time: override.customHours?.start,\n            end_time: override.customHours?.end,\n            session_duration: override.customHours?.timeSlots?.[0]?.duration || 60,\n            session_type: override.customHours?.timeSlots?.[0]?.type || 'individual',\n            max_sessions: override.customHours?.timeSlots?.[0]?.maxSessions || 1,\n            reason: override.reason,\n            notes: override.notes,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    }\n    /**\n   * Validate WeeklyAvailability data\n   */ static validateWeeklyAvailability(availability) {\n        const errors = [];\n        const warnings = [];\n        // Check required fields\n        if (!availability.standardHours) {\n            errors.push('Standard hours are required');\n        }\n        if (!availability.sessionSettings) {\n            errors.push('Session settings are required');\n        }\n        // Validate each day\n        const days = Object.keys(availability.standardHours);\n        days.forEach((day)=>{\n            const dayAvailability = availability.standardHours[day];\n            if (dayAvailability.enabled && dayAvailability.timeSlots.length === 0) {\n                warnings.push(`${day} is enabled but has no time slots`);\n            }\n            // Validate time slots\n            dayAvailability.timeSlots.forEach((slot, index)=>{\n                if (!slot.start || !slot.end) {\n                    errors.push(`${day} slot ${index + 1} is missing start or end time`);\n                }\n                if (slot.duration <= 0) {\n                    errors.push(`${day} slot ${index + 1} has invalid duration`);\n                }\n                if (slot.maxSessions <= 0) {\n                    errors.push(`${day} slot ${index + 1} has invalid max sessions`);\n                }\n            });\n        });\n        // Validate session settings\n        if (availability.sessionSettings.sessionDuration <= 0) {\n            errors.push('Session duration must be greater than 0');\n        }\n        if (availability.sessionSettings.bufferTime < 0) {\n            errors.push('Buffer time cannot be negative');\n        }\n        if (availability.sessionSettings.maxSessionsPerDay <= 0) {\n            errors.push('Max sessions per day must be greater than 0');\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n   * Get default availability configuration\n   */ static getDefaultAvailability() {\n        return {\n            ..._types_availability__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_WEEKLY_AVAILABILITY\n        };\n    }\n    /**\n   * Calculate end time from start time and duration\n   */ static calculateEndTime(startTime, durationMinutes) {\n        const [hours, minutes] = startTime.split(':').map(Number);\n        const startDate = new Date();\n        startDate.setHours(hours, minutes, 0, 0);\n        const endDate = new Date(startDate.getTime() + durationMinutes * 60000);\n        return endDate.toTimeString().slice(0, 5);\n    }\n    /**\n   * Generate time slots for a day based on start/end times and session duration\n   */ static generateTimeSlots(startTime, endTime, sessionDuration, bufferTime = 0) {\n        const slots = [];\n        const [startHour, startMinute] = startTime.split(':').map(Number);\n        const [endHour, endMinute] = endTime.split(':').map(Number);\n        const startMinutes = startHour * 60 + startMinute;\n        const endMinutes = endHour * 60 + endMinute;\n        const totalDuration = sessionDuration + bufferTime;\n        let currentMinutes = startMinutes;\n        let slotIndex = 1;\n        while(currentMinutes + sessionDuration <= endMinutes){\n            const slotStart = this.formatMinutesToTime(currentMinutes);\n            const slotEnd = this.formatMinutesToTime(currentMinutes + sessionDuration);\n            slots.push({\n                ..._types_availability__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIME_SLOT,\n                id: `slot-${Date.now()}-${slotIndex}`,\n                start: slotStart,\n                end: slotEnd,\n                duration: sessionDuration,\n                title: `Session ${slotIndex}`\n            });\n            currentMinutes += totalDuration;\n            slotIndex++;\n        }\n        return slots;\n    }\n    /**\n   * Format minutes to HH:MM time string\n   */ static formatMinutesToTime(minutes) {\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n    }\n    /**\n   * Check if two time slots overlap\n   */ static doTimeSlotsOverlap(slot1, slot2) {\n        const start1 = this.timeToMinutes(slot1.start);\n        const end1 = this.timeToMinutes(slot1.end);\n        const start2 = this.timeToMinutes(slot2.start);\n        const end2 = this.timeToMinutes(slot2.end);\n        return start1 < end2 && start2 < end1;\n    }\n    /**\n   * Convert time string to minutes\n   */ static timeToMinutes(time) {\n        const [hours, minutes] = time.split(':').map(Number);\n        return hours * 60 + minutes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/availability-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/server-auth.ts":
/*!****************************!*\
  !*** ./lib/server-auth.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getServerSession: () => (/* binding */ getServerSession),\n/* harmony export */   requireApiAuth: () => (/* binding */ requireApiAuth),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(rsc)/./node_modules/next/dist/api/navigation.react-server.js\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./session-manager */ \"(rsc)/./lib/session-manager.ts\");\n\n\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_3__.createClient)(\"https://frzciymslvpohhyefmtr.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY);\n// Short-lived session cache to reduce database load\nconst sessionCache = new Map();\nconst CACHE_TTL_MS = 10000 // 10 seconds - balance between performance and security\n;\n/**\n * Securely verify server-side session from HTTP-only cookie\n * This replaces the insecure cookie parsing in API routes\n */ async function getServerSession() {\n    try {\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n        // Try different cookie names based on user type\n        // Priority: unified session > specific user types\n        const cookieNames = [\n            'quiet_session',\n            'quiet_therapist_user',\n            'quiet_partner_user',\n            'quiet_admin_user',\n            'quiet_individual_user',\n            'quiet_user' // Legacy cookie name\n        ];\n        let userCookie = null;\n        let cookieData = null;\n        for (const cookieName of cookieNames){\n            userCookie = cookieStore.get(cookieName);\n            console.log('🔍 DEBUG: Checking cookie:', cookieName, userCookie ? 'FOUND' : 'NOT FOUND');\n            if (userCookie) {\n                try {\n                    // Handle unified session cookie (JWT token) differently\n                    if (cookieName === 'quiet_session') {\n                        // This is a JWT token, not JSON data\n                        const { jwtVerify } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/jose\").then(__webpack_require__.bind(__webpack_require__, /*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/index.js\"));\n                        const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || 'your-secret-key');\n                        const { payload } = await jwtVerify(userCookie.value, JWT_SECRET);\n                        // Convert JWT payload to expected format\n                        cookieData = {\n                            session_token: userCookie.value,\n                            id: payload.id,\n                            email: payload.email,\n                            full_name: payload.name,\n                            user_type: payload.user_type || payload.role,\n                            is_verified: payload.is_verified,\n                            is_active: payload.is_active\n                        };\n                        console.log('🔍 DEBUG: Parsed JWT session data:', {\n                            cookieName,\n                            cookieData\n                        });\n                        break;\n                    } else {\n                        // Handle legacy JSON cookies\n                        cookieData = JSON.parse(decodeURIComponent(userCookie.value));\n                        console.log('🔍 DEBUG: Parsed cookie data:', {\n                            cookieName,\n                            cookieData\n                        });\n                        break;\n                    }\n                } catch (error) {\n                    console.log('🔍 DEBUG: Failed to parse cookie:', cookieName, error);\n                    continue;\n                }\n            }\n        }\n        if (!cookieData) {\n            return null;\n        }\n        // If this is a unified session (JWT), we can trust it directly\n        if (cookieData.id && cookieData.email) {\n            console.log('✅ Using unified session data directly');\n            const session = {\n                user: {\n                    id: cookieData.id,\n                    email: cookieData.email,\n                    full_name: cookieData.full_name,\n                    user_type: cookieData.user_type,\n                    is_verified: cookieData.is_verified,\n                    is_active: cookieData.is_active\n                },\n                session_token: cookieData.session_token || 'unified-session',\n                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours from now\n            };\n            return session;\n        }\n        // Fallback to database verification for legacy sessions\n        if (!cookieData.session_token) {\n            return null;\n        }\n        const sessionToken = cookieData.session_token;\n        // Check cache first for performance\n        const cached = sessionCache.get(sessionToken);\n        if (cached && cached.expiry > Date.now()) {\n            console.log('✅ Session loaded from cache');\n            return cached.session;\n        }\n        // Verify the session token against the database\n        console.log('🔍 DEBUG: Looking for session token:', sessionToken);\n        const { data: sessionData, error: sessionError } = await supabase.from('user_sessions').select(`\n        user_id,\n        session_token,\n        expires_at,\n        users (\n          id,\n          email,\n          full_name,\n          user_type,\n          is_verified,\n          is_active\n        )\n      `).eq('session_token', sessionToken).single();\n        console.log('🔍 DEBUG: Session query result:', {\n            sessionData,\n            sessionError\n        });\n        if (sessionError || !sessionData) {\n            console.log('❌ Invalid session token:', sessionError);\n            // Remove from cache if it was invalid\n            sessionCache.delete(sessionToken);\n            return null;\n        }\n        // Check if session is expired\n        const expiresAt = new Date(sessionData.expires_at);\n        if (expiresAt < new Date()) {\n            console.log('❌ Session expired');\n            // Clean up expired session and cache\n            sessionCache.delete(sessionToken);\n            await supabase.from('user_sessions').delete().eq('session_token', sessionToken);\n            return null;\n        }\n        // Create session object\n        const session = {\n            user: {\n                id: sessionData.users.id,\n                email: sessionData.users.email,\n                full_name: sessionData.users.full_name,\n                user_type: sessionData.users.user_type,\n                is_verified: sessionData.users.is_verified,\n                is_active: sessionData.users.is_active\n            },\n            session_token: sessionData.session_token,\n            expires_at: expiresAt\n        };\n        // Cache the validated session\n        sessionCache.set(sessionToken, {\n            session,\n            expiry: Date.now() + CACHE_TTL_MS\n        });\n        // Update last accessed time (async, don't wait)\n        supabase.from('user_sessions').update({\n            last_accessed_at: new Date().toISOString()\n        }).eq('session_token', sessionToken).then((result)=>{\n            if (result.error) {\n                console.warn('⚠️ Failed to update session access time:', result.error);\n            } else {\n                console.log('✅ Session access time updated');\n            }\n        });\n        return session;\n    } catch (error) {\n        console.error('❌ Error verifying server session:', error);\n        return null;\n    }\n}\n/**\n * Require authentication and optionally specific user type\n * Throws redirect if not authenticated or wrong user type\n */ async function requireAuth(allowedUserTypes) {\n    const session = await getServerSession();\n    if (!session) {\n        (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect)('/login');\n    }\n    if (!session.user.is_active) {\n        (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect)('/account-disabled');\n    }\n    if (allowedUserTypes && !allowedUserTypes.includes(session.user.user_type)) {\n        (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect)('/unauthorized');\n    }\n    return session;\n}\n/**\n * Require specific user type for API routes\n * Returns error response if not authorized\n */ async function requireApiAuth(allowedUserTypes) {\n    // Try unified session first\n    const unifiedSession = await _session_manager__WEBPACK_IMPORTED_MODULE_2__.SessionManager.getSession();\n    if (unifiedSession) {\n        // Convert unified session to ServerSession format\n        const session = {\n            user: {\n                id: unifiedSession.id,\n                email: unifiedSession.email,\n                full_name: unifiedSession.name,\n                user_type: unifiedSession.user_type,\n                is_verified: unifiedSession.is_verified,\n                is_active: unifiedSession.is_active\n            },\n            session_token: unifiedSession.session_token || '',\n            expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours from now\n        };\n        if (!session.user.is_active) {\n            return {\n                error: new Response(JSON.stringify({\n                    error: 'Account disabled'\n                }), {\n                    status: 403,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n            };\n        }\n        if (allowedUserTypes && !allowedUserTypes.includes(session.user.user_type)) {\n            return {\n                error: new Response(JSON.stringify({\n                    error: 'Insufficient permissions'\n                }), {\n                    status: 403,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n            };\n        }\n        return {\n            session\n        };\n    }\n    // Fallback to old session system\n    const session = await getServerSession();\n    if (!session) {\n        return {\n            error: new Response(JSON.stringify({\n                error: 'Authentication required'\n            }), {\n                status: 401,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n        };\n    }\n    if (!session.user.is_active) {\n        return {\n            error: new Response(JSON.stringify({\n                error: 'Account disabled'\n            }), {\n                status: 403,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n        };\n    }\n    if (allowedUserTypes && !allowedUserTypes.includes(session.user.user_type)) {\n        return {\n            error: new Response(JSON.stringify({\n                error: 'Insufficient permissions'\n            }), {\n                status: 403,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n        };\n    }\n    return {\n        session\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1FBQ1osT0FBTztZQUNMRCxPQUFPLElBQUlnQyxTQUNUbkMsS0FBS29DLFNBQVMsQ0FBQztnQkFBRWpDLE9BQU87WUFBMEIsSUFDbEQ7Z0JBQUVrQyxRQUFRO2dCQUFLQyxTQUFTO29CQUFFLGdCQUFnQjtnQkFBbUI7WUFBRTtRQUVuRTtJQUNGO0lBRUEsSUFBSSxDQUFDbEMsUUFBUUMsSUFBSSxDQUFDTixTQUFTLEVBQUU7UUFDM0IsT0FBTztZQUNMSSxPQUFPLElBQUlnQyxTQUNUbkMsS0FBS29DLFNBQVMsQ0FBQztnQkFBRWpDLE9BQU87WUFBbUIsSUFDM0M7Z0JBQUVrQyxRQUFRO2dCQUFLQyxTQUFTO29CQUFFLGdCQUFnQjtnQkFBbUI7WUFBRTtRQUVuRTtJQUNGO0lBRUEsSUFBSVIsb0JBQW9CLENBQUNBLGlCQUFpQkMsUUFBUSxDQUFDM0IsUUFBUUMsSUFBSSxDQUFDVCxTQUFTLEdBQUc7UUFDMUUsT0FBTztZQUNMTyxPQUFPLElBQUlnQyxTQUNUbkMsS0FBS29DLFNBQVMsQ0FBQztnQkFBRWpDLE9BQU87WUFBMkIsSUFDbkQ7Z0JBQUVrQyxRQUFRO2dCQUFLQyxTQUFTO29CQUFFLGdCQUFnQjtnQkFBbUI7WUFBRTtRQUVuRTtJQUNGO0lBRUEsT0FBTztRQUFFbEM7SUFBUTtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2svRGVza3RvcC90cnBpLWFwcC9saWIvc2VydmVyLWF1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29va2llcyB9IGZyb20gJ25leHQvaGVhZGVycydcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcbmltcG9ydCB7IHJlZGlyZWN0IH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJ1xuaW1wb3J0IHsgU2Vzc2lvbk1hbmFnZXIgfSBmcm9tICcuL3Nlc3Npb24tbWFuYWdlcidcblxuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoXG4gIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCEsXG4gIHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkhXG4pXG5cbi8vIFNob3J0LWxpdmVkIHNlc3Npb24gY2FjaGUgdG8gcmVkdWNlIGRhdGFiYXNlIGxvYWRcbmNvbnN0IHNlc3Npb25DYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCB7IHNlc3Npb246IFNlcnZlclNlc3Npb247IGV4cGlyeTogbnVtYmVyIH0+KClcbmNvbnN0IENBQ0hFX1RUTF9NUyA9IDEwXzAwMCAvLyAxMCBzZWNvbmRzIC0gYmFsYW5jZSBiZXR3ZWVuIHBlcmZvcm1hbmNlIGFuZCBzZWN1cml0eVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZlclNlc3Npb24ge1xuICB1c2VyOiB7XG4gICAgaWQ6IHN0cmluZ1xuICAgIGVtYWlsOiBzdHJpbmdcbiAgICBmdWxsX25hbWU6IHN0cmluZ1xuICAgIHVzZXJfdHlwZTogJ2luZGl2aWR1YWwnIHwgJ3RoZXJhcGlzdCcgfCAncGFydG5lcicgfCAnYWRtaW4nXG4gICAgaXNfdmVyaWZpZWQ6IGJvb2xlYW5cbiAgICBpc19hY3RpdmU6IGJvb2xlYW5cbiAgfVxuICBzZXNzaW9uX3Rva2VuOiBzdHJpbmdcbiAgZXhwaXJlc19hdDogRGF0ZVxufVxuXG4vKipcbiAqIFNlY3VyZWx5IHZlcmlmeSBzZXJ2ZXItc2lkZSBzZXNzaW9uIGZyb20gSFRUUC1vbmx5IGNvb2tpZVxuICogVGhpcyByZXBsYWNlcyB0aGUgaW5zZWN1cmUgY29va2llIHBhcnNpbmcgaW4gQVBJIHJvdXRlc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2Vzc2lvbigpOiBQcm9taXNlPFNlcnZlclNlc3Npb24gfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY29va2llU3RvcmUgPSBhd2FpdCBjb29raWVzKClcbiAgICBcbiAgICAvLyBUcnkgZGlmZmVyZW50IGNvb2tpZSBuYW1lcyBiYXNlZCBvbiB1c2VyIHR5cGVcbiAgICAvLyBQcmlvcml0eTogdW5pZmllZCBzZXNzaW9uID4gc3BlY2lmaWMgdXNlciB0eXBlc1xuICAgIGNvbnN0IGNvb2tpZU5hbWVzID0gW1xuICAgICAgJ3F1aWV0X3Nlc3Npb24nLCAvLyBVbmlmaWVkIHNlc3Npb24gY29va2llIChoaWdoZXN0IHByaW9yaXR5KVxuICAgICAgJ3F1aWV0X3RoZXJhcGlzdF91c2VyJyxcbiAgICAgICdxdWlldF9wYXJ0bmVyX3VzZXInLCBcbiAgICAgICdxdWlldF9hZG1pbl91c2VyJyxcbiAgICAgICdxdWlldF9pbmRpdmlkdWFsX3VzZXInLFxuICAgICAgJ3F1aWV0X3VzZXInIC8vIExlZ2FjeSBjb29raWUgbmFtZVxuICAgIF1cbiAgICBcbiAgICBsZXQgdXNlckNvb2tpZSA9IG51bGxcbiAgICBsZXQgY29va2llRGF0YSA9IG51bGxcbiAgICBcbiAgICBmb3IgKGNvbnN0IGNvb2tpZU5hbWUgb2YgY29va2llTmFtZXMpIHtcbiAgICAgIHVzZXJDb29raWUgPSBjb29raWVTdG9yZS5nZXQoY29va2llTmFtZSlcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIERFQlVHOiBDaGVja2luZyBjb29raWU6JywgY29va2llTmFtZSwgdXNlckNvb2tpZSA/ICdGT1VORCcgOiAnTk9UIEZPVU5EJylcbiAgICAgIGlmICh1c2VyQ29va2llKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gSGFuZGxlIHVuaWZpZWQgc2Vzc2lvbiBjb29raWUgKEpXVCB0b2tlbikgZGlmZmVyZW50bHlcbiAgICAgICAgICBpZiAoY29va2llTmFtZSA9PT0gJ3F1aWV0X3Nlc3Npb24nKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGEgSldUIHRva2VuLCBub3QgSlNPTiBkYXRhXG4gICAgICAgICAgICBjb25zdCB7IGp3dFZlcmlmeSB9ID0gYXdhaXQgaW1wb3J0KCdqb3NlJylcbiAgICAgICAgICAgIGNvbnN0IEpXVF9TRUNSRVQgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAneW91ci1zZWNyZXQta2V5JylcbiAgICAgICAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gYXdhaXQgand0VmVyaWZ5KHVzZXJDb29raWUudmFsdWUsIEpXVF9TRUNSRVQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENvbnZlcnQgSldUIHBheWxvYWQgdG8gZXhwZWN0ZWQgZm9ybWF0XG4gICAgICAgICAgICBjb29raWVEYXRhID0ge1xuICAgICAgICAgICAgICBzZXNzaW9uX3Rva2VuOiB1c2VyQ29va2llLnZhbHVlLFxuICAgICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcbiAgICAgICAgICAgICAgZW1haWw6IHBheWxvYWQuZW1haWwsXG4gICAgICAgICAgICAgIGZ1bGxfbmFtZTogcGF5bG9hZC5uYW1lLFxuICAgICAgICAgICAgICB1c2VyX3R5cGU6IHBheWxvYWQudXNlcl90eXBlIHx8IHBheWxvYWQucm9sZSxcbiAgICAgICAgICAgICAgaXNfdmVyaWZpZWQ6IHBheWxvYWQuaXNfdmVyaWZpZWQsXG4gICAgICAgICAgICAgIGlzX2FjdGl2ZTogcGF5bG9hZC5pc19hY3RpdmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIERFQlVHOiBQYXJzZWQgSldUIHNlc3Npb24gZGF0YTonLCB7IGNvb2tpZU5hbWUsIGNvb2tpZURhdGEgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBsZWdhY3kgSlNPTiBjb29raWVzXG4gICAgICAgICAgICBjb29raWVEYXRhID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQodXNlckNvb2tpZS52YWx1ZSkpXG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBERUJVRzogUGFyc2VkIGNvb2tpZSBkYXRhOicsIHsgY29va2llTmFtZSwgY29va2llRGF0YSB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflI0gREVCVUc6IEZhaWxlZCB0byBwYXJzZSBjb29raWU6JywgY29va2llTmFtZSwgZXJyb3IpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAoIWNvb2tpZURhdGEpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHVuaWZpZWQgc2Vzc2lvbiAoSldUKSwgd2UgY2FuIHRydXN0IGl0IGRpcmVjdGx5XG4gICAgaWYgKGNvb2tpZURhdGEuaWQgJiYgY29va2llRGF0YS5lbWFpbCkge1xuICAgICAgY29uc29sZS5sb2coJ+KchSBVc2luZyB1bmlmaWVkIHNlc3Npb24gZGF0YSBkaXJlY3RseScpXG4gICAgICBjb25zdCBzZXNzaW9uOiBTZXJ2ZXJTZXNzaW9uID0ge1xuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6IGNvb2tpZURhdGEuaWQsXG4gICAgICAgICAgZW1haWw6IGNvb2tpZURhdGEuZW1haWwsXG4gICAgICAgICAgZnVsbF9uYW1lOiBjb29raWVEYXRhLmZ1bGxfbmFtZSxcbiAgICAgICAgICB1c2VyX3R5cGU6IGNvb2tpZURhdGEudXNlcl90eXBlLFxuICAgICAgICAgIGlzX3ZlcmlmaWVkOiBjb29raWVEYXRhLmlzX3ZlcmlmaWVkLFxuICAgICAgICAgIGlzX2FjdGl2ZTogY29va2llRGF0YS5pc19hY3RpdmVcbiAgICAgICAgfSxcbiAgICAgICAgc2Vzc2lvbl90b2tlbjogY29va2llRGF0YS5zZXNzaW9uX3Rva2VuIHx8ICd1bmlmaWVkLXNlc3Npb24nLFxuICAgICAgICBleHBpcmVzX2F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkgLy8gMjQgaG91cnMgZnJvbSBub3dcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgdG8gZGF0YWJhc2UgdmVyaWZpY2F0aW9uIGZvciBsZWdhY3kgc2Vzc2lvbnNcbiAgICBpZiAoIWNvb2tpZURhdGEuc2Vzc2lvbl90b2tlbikge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBzZXNzaW9uVG9rZW4gPSBjb29raWVEYXRhLnNlc3Npb25fdG9rZW5cblxuICAgIC8vIENoZWNrIGNhY2hlIGZpcnN0IGZvciBwZXJmb3JtYW5jZVxuICAgIGNvbnN0IGNhY2hlZCA9IHNlc3Npb25DYWNoZS5nZXQoc2Vzc2lvblRva2VuKVxuICAgIGlmIChjYWNoZWQgJiYgY2FjaGVkLmV4cGlyeSA+IERhdGUubm93KCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgU2Vzc2lvbiBsb2FkZWQgZnJvbSBjYWNoZScpXG4gICAgICByZXR1cm4gY2FjaGVkLnNlc3Npb25cbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgdGhlIHNlc3Npb24gdG9rZW4gYWdhaW5zdCB0aGUgZGF0YWJhc2VcbiAgICBjb25zb2xlLmxvZygn8J+UjSBERUJVRzogTG9va2luZyBmb3Igc2Vzc2lvbiB0b2tlbjonLCBzZXNzaW9uVG9rZW4pXG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VyX3Nlc3Npb25zJylcbiAgICAgIC5zZWxlY3QoYFxuICAgICAgICB1c2VyX2lkLFxuICAgICAgICBzZXNzaW9uX3Rva2VuLFxuICAgICAgICBleHBpcmVzX2F0LFxuICAgICAgICB1c2VycyAoXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgZW1haWwsXG4gICAgICAgICAgZnVsbF9uYW1lLFxuICAgICAgICAgIHVzZXJfdHlwZSxcbiAgICAgICAgICBpc192ZXJpZmllZCxcbiAgICAgICAgICBpc19hY3RpdmVcbiAgICAgICAgKVxuICAgICAgYClcbiAgICAgIC5lcSgnc2Vzc2lvbl90b2tlbicsIHNlc3Npb25Ub2tlbilcbiAgICAgIC5zaW5nbGUoKVxuXG4gICAgY29uc29sZS5sb2coJ/CflI0gREVCVUc6IFNlc3Npb24gcXVlcnkgcmVzdWx0OicsIHsgc2Vzc2lvbkRhdGEsIHNlc3Npb25FcnJvciB9KVxuXG4gICAgaWYgKHNlc3Npb25FcnJvciB8fCAhc2Vzc2lvbkRhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfinYwgSW52YWxpZCBzZXNzaW9uIHRva2VuOicsIHNlc3Npb25FcnJvcilcbiAgICAgIC8vIFJlbW92ZSBmcm9tIGNhY2hlIGlmIGl0IHdhcyBpbnZhbGlkXG4gICAgICBzZXNzaW9uQ2FjaGUuZGVsZXRlKHNlc3Npb25Ub2tlbilcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgc2Vzc2lvbiBpcyBleHBpcmVkXG4gICAgY29uc3QgZXhwaXJlc0F0ID0gbmV3IERhdGUoc2Vzc2lvbkRhdGEuZXhwaXJlc19hdClcbiAgICBpZiAoZXhwaXJlc0F0IDwgbmV3IERhdGUoKSkge1xuICAgICAgY29uc29sZS5sb2coJ+KdjCBTZXNzaW9uIGV4cGlyZWQnKVxuICAgICAgLy8gQ2xlYW4gdXAgZXhwaXJlZCBzZXNzaW9uIGFuZCBjYWNoZVxuICAgICAgc2Vzc2lvbkNhY2hlLmRlbGV0ZShzZXNzaW9uVG9rZW4pXG4gICAgICBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndXNlcl9zZXNzaW9ucycpXG4gICAgICAgIC5kZWxldGUoKVxuICAgICAgICAuZXEoJ3Nlc3Npb25fdG9rZW4nLCBzZXNzaW9uVG9rZW4pXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBzZXNzaW9uIG9iamVjdFxuICAgIGNvbnN0IHNlc3Npb246IFNlcnZlclNlc3Npb24gPSB7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGlkOiAoc2Vzc2lvbkRhdGEudXNlcnMgYXMgYW55KS5pZCxcbiAgICAgICAgZW1haWw6IChzZXNzaW9uRGF0YS51c2VycyBhcyBhbnkpLmVtYWlsLFxuICAgICAgICBmdWxsX25hbWU6IChzZXNzaW9uRGF0YS51c2VycyBhcyBhbnkpLmZ1bGxfbmFtZSxcbiAgICAgICAgdXNlcl90eXBlOiAoc2Vzc2lvbkRhdGEudXNlcnMgYXMgYW55KS51c2VyX3R5cGUsXG4gICAgICAgIGlzX3ZlcmlmaWVkOiAoc2Vzc2lvbkRhdGEudXNlcnMgYXMgYW55KS5pc192ZXJpZmllZCxcbiAgICAgICAgaXNfYWN0aXZlOiAoc2Vzc2lvbkRhdGEudXNlcnMgYXMgYW55KS5pc19hY3RpdmVcbiAgICAgIH0sXG4gICAgICBzZXNzaW9uX3Rva2VuOiBzZXNzaW9uRGF0YS5zZXNzaW9uX3Rva2VuLFxuICAgICAgZXhwaXJlc19hdDogZXhwaXJlc0F0XG4gICAgfVxuXG4gICAgLy8gQ2FjaGUgdGhlIHZhbGlkYXRlZCBzZXNzaW9uXG4gICAgc2Vzc2lvbkNhY2hlLnNldChzZXNzaW9uVG9rZW4sIHtcbiAgICAgIHNlc3Npb24sXG4gICAgICBleHBpcnk6IERhdGUubm93KCkgKyBDQUNIRV9UVExfTVNcbiAgICB9KVxuXG4gICAgLy8gVXBkYXRlIGxhc3QgYWNjZXNzZWQgdGltZSAoYXN5bmMsIGRvbid0IHdhaXQpXG4gICAgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VyX3Nlc3Npb25zJylcbiAgICAgIC51cGRhdGUoeyBsYXN0X2FjY2Vzc2VkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSlcbiAgICAgIC5lcSgnc2Vzc2lvbl90b2tlbicsIHNlc3Npb25Ub2tlbilcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEZhaWxlZCB0byB1cGRhdGUgc2Vzc2lvbiBhY2Nlc3MgdGltZTonLCByZXN1bHQuZXJyb3IpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ+KchSBTZXNzaW9uIGFjY2VzcyB0aW1lIHVwZGF0ZWQnKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgcmV0dXJuIHNlc3Npb25cblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciB2ZXJpZnlpbmcgc2VydmVyIHNlc3Npb246JywgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vKipcbiAqIFJlcXVpcmUgYXV0aGVudGljYXRpb24gYW5kIG9wdGlvbmFsbHkgc3BlY2lmaWMgdXNlciB0eXBlXG4gKiBUaHJvd3MgcmVkaXJlY3QgaWYgbm90IGF1dGhlbnRpY2F0ZWQgb3Igd3JvbmcgdXNlciB0eXBlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1aXJlQXV0aChhbGxvd2VkVXNlclR5cGVzPzogc3RyaW5nW10pOiBQcm9taXNlPFNlcnZlclNlc3Npb24+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlcnZlclNlc3Npb24oKVxuICBcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgcmVkaXJlY3QoJy9sb2dpbicpXG4gIH1cbiAgXG4gIGlmICghc2Vzc2lvbi51c2VyLmlzX2FjdGl2ZSkge1xuICAgIHJlZGlyZWN0KCcvYWNjb3VudC1kaXNhYmxlZCcpXG4gIH1cbiAgXG4gIGlmIChhbGxvd2VkVXNlclR5cGVzICYmICFhbGxvd2VkVXNlclR5cGVzLmluY2x1ZGVzKHNlc3Npb24udXNlci51c2VyX3R5cGUpKSB7XG4gICAgcmVkaXJlY3QoJy91bmF1dGhvcml6ZWQnKVxuICB9XG4gIFxuICByZXR1cm4gc2Vzc2lvblxufVxuXG4vKipcbiAqIFJlcXVpcmUgc3BlY2lmaWMgdXNlciB0eXBlIGZvciBBUEkgcm91dGVzXG4gKiBSZXR1cm5zIGVycm9yIHJlc3BvbnNlIGlmIG5vdCBhdXRob3JpemVkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1aXJlQXBpQXV0aChhbGxvd2VkVXNlclR5cGVzPzogc3RyaW5nW10pOiBQcm9taXNlPHsgc2Vzc2lvbjogU2VydmVyU2Vzc2lvbiB9IHwgeyBlcnJvcjogUmVzcG9uc2UgfT4ge1xuICAvLyBUcnkgdW5pZmllZCBzZXNzaW9uIGZpcnN0XG4gIGNvbnN0IHVuaWZpZWRTZXNzaW9uID0gYXdhaXQgU2Vzc2lvbk1hbmFnZXIuZ2V0U2Vzc2lvbigpXG4gIFxuICBpZiAodW5pZmllZFNlc3Npb24pIHtcbiAgICAvLyBDb252ZXJ0IHVuaWZpZWQgc2Vzc2lvbiB0byBTZXJ2ZXJTZXNzaW9uIGZvcm1hdFxuICAgIGNvbnN0IHNlc3Npb246IFNlcnZlclNlc3Npb24gPSB7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGlkOiB1bmlmaWVkU2Vzc2lvbi5pZCxcbiAgICAgICAgZW1haWw6IHVuaWZpZWRTZXNzaW9uLmVtYWlsLFxuICAgICAgICBmdWxsX25hbWU6IHVuaWZpZWRTZXNzaW9uLm5hbWUsXG4gICAgICAgIHVzZXJfdHlwZTogdW5pZmllZFNlc3Npb24udXNlcl90eXBlIGFzICdpbmRpdmlkdWFsJyB8ICd0aGVyYXBpc3QnIHwgJ3BhcnRuZXInIHwgJ2FkbWluJyxcbiAgICAgICAgaXNfdmVyaWZpZWQ6IHVuaWZpZWRTZXNzaW9uLmlzX3ZlcmlmaWVkLFxuICAgICAgICBpc19hY3RpdmU6IHVuaWZpZWRTZXNzaW9uLmlzX2FjdGl2ZVxuICAgICAgfSxcbiAgICAgIHNlc3Npb25fdG9rZW46IHVuaWZpZWRTZXNzaW9uLnNlc3Npb25fdG9rZW4gfHwgJycsXG4gICAgICBleHBpcmVzX2F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkgLy8gMjQgaG91cnMgZnJvbSBub3dcbiAgICB9XG4gICAgXG4gICAgaWYgKCFzZXNzaW9uLnVzZXIuaXNfYWN0aXZlKSB7XG4gICAgICByZXR1cm4geyBcbiAgICAgICAgZXJyb3I6IG5ldyBSZXNwb25zZShcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnQWNjb3VudCBkaXNhYmxlZCcgfSksIFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDMsIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9IH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAoYWxsb3dlZFVzZXJUeXBlcyAmJiAhYWxsb3dlZFVzZXJUeXBlcy5pbmNsdWRlcyhzZXNzaW9uLnVzZXIudXNlcl90eXBlKSkge1xuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIGVycm9yOiBuZXcgUmVzcG9uc2UoXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucycgfSksIFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDMsIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9IH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4geyBzZXNzaW9uIH1cbiAgfVxuICBcbiAgLy8gRmFsbGJhY2sgdG8gb2xkIHNlc3Npb24gc3lzdGVtXG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXJ2ZXJTZXNzaW9uKClcbiAgXG4gIGlmICghc2Vzc2lvbikge1xuICAgIHJldHVybiB7IFxuICAgICAgZXJyb3I6IG5ldyBSZXNwb25zZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyB9KSwgXG4gICAgICAgIHsgc3RhdHVzOiA0MDEsIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9IH1cbiAgICAgIClcbiAgICB9XG4gIH1cbiAgXG4gIGlmICghc2Vzc2lvbi51c2VyLmlzX2FjdGl2ZSkge1xuICAgIHJldHVybiB7IFxuICAgICAgZXJyb3I6IG5ldyBSZXNwb25zZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0FjY291bnQgZGlzYWJsZWQnIH0pLCBcbiAgICAgICAgeyBzdGF0dXM6IDQwMywgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0gfVxuICAgICAgKVxuICAgIH1cbiAgfVxuICBcbiAgaWYgKGFsbG93ZWRVc2VyVHlwZXMgJiYgIWFsbG93ZWRVc2VyVHlwZXMuaW5jbHVkZXMoc2Vzc2lvbi51c2VyLnVzZXJfdHlwZSkpIHtcbiAgICByZXR1cm4geyBcbiAgICAgIGVycm9yOiBuZXcgUmVzcG9uc2UoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6ICdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMnIH0pLCBcbiAgICAgICAgeyBzdGF0dXM6IDQwMywgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0gfVxuICAgICAgKVxuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHsgc2Vzc2lvbiB9XG59XG4iXSwibmFtZXMiOlsiY29va2llcyIsImNyZWF0ZUNsaWVudCIsInJlZGlyZWN0IiwiU2Vzc2lvbk1hbmFnZXIiLCJzdXBhYmFzZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwic2Vzc2lvbkNhY2hlIiwiTWFwIiwiQ0FDSEVfVFRMX01TIiwiZ2V0U2VydmVyU2Vzc2lvbiIsImNvb2tpZVN0b3JlIiwiY29va2llTmFtZXMiLCJ1c2VyQ29va2llIiwiY29va2llRGF0YSIsImNvb2tpZU5hbWUiLCJnZXQiLCJjb25zb2xlIiwibG9nIiwiand0VmVyaWZ5IiwiSldUX1NFQ1JFVCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwicGF5bG9hZCIsInZhbHVlIiwic2Vzc2lvbl90b2tlbiIsImlkIiwiZW1haWwiLCJmdWxsX25hbWUiLCJuYW1lIiwidXNlcl90eXBlIiwicm9sZSIsImlzX3ZlcmlmaWVkIiwiaXNfYWN0aXZlIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXJyb3IiLCJzZXNzaW9uIiwidXNlciIsImV4cGlyZXNfYXQiLCJEYXRlIiwibm93Iiwic2Vzc2lvblRva2VuIiwiY2FjaGVkIiwiZXhwaXJ5IiwiZGF0YSIsInNlc3Npb25EYXRhIiwic2Vzc2lvbkVycm9yIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwiZGVsZXRlIiwiZXhwaXJlc0F0IiwidXNlcnMiLCJzZXQiLCJ1cGRhdGUiLCJsYXN0X2FjY2Vzc2VkX2F0IiwidG9JU09TdHJpbmciLCJ0aGVuIiwicmVzdWx0Iiwid2FybiIsInJlcXVpcmVBdXRoIiwiYWxsb3dlZFVzZXJUeXBlcyIsImluY2x1ZGVzIiwicmVxdWlyZUFwaUF1dGgiLCJ1bmlmaWVkU2Vzc2lvbiIsImdldFNlc3Npb24iLCJSZXNwb25zZSIsInN0cmluZ2lmeSIsInN0YXR1cyIsImhlYWRlcnMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/server-auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/session-manager.ts":
/*!********************************!*\
  !*** ./lib/session-manager.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/sign.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n\n\nconst JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || 'trpi-super-secret-key-2024-therapy-platform');\nclass SessionManager {\n    static{\n        this.COOKIE_NAME = 'quiet_session';\n    }\n    static{\n        this.MAX_AGE = 24 * 60 * 60 * 1000 // 24 hours (healthcare-grade security)\n        ;\n    }\n    static{\n        this.REFRESH_WINDOW = 6 * 60 * 60 * 1000 // Refresh if < 6 hours left\n        ;\n    }\n    static{\n        this.GRACE_PERIOD = 30 * 60 * 1000 // 30 minutes grace after expiry\n        ;\n    }\n    static{\n        this.ABSOLUTE_MAX_AGE = 30 * 24 * 60 * 60 * 1000 // 30 days absolute maximum\n        ;\n    }\n    /**\n   * Create a new session and set the cookie\n   */ static async createSession(sessionData) {\n        const token = await new jose__WEBPACK_IMPORTED_MODULE_2__.SignJWT(sessionData).setProtectedHeader({\n            alg: 'HS256'\n        }).setIssuedAt().setExpirationTime('24h') // Healthcare-grade: 24 hours\n        .sign(JWT_SECRET);\n        // Set the cookie\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n        cookieStore.set(this.COOKIE_NAME, token, {\n            httpOnly: true,\n            secure: \"development\" === 'production',\n            sameSite: 'lax',\n            maxAge: this.MAX_AGE,\n            path: '/'\n        });\n        return token;\n    }\n    /**\n   * Get the current session from the cookie\n   */ static async getSession() {\n        try {\n            const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n            const token = cookieStore.get(this.COOKIE_NAME)?.value;\n            if (!token) {\n                console.log('🔍 No session cookie found');\n                return null;\n            }\n            console.log('🍪 Raw cookie value:', token.substring(0, 50) + '...');\n            const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, JWT_SECRET);\n            const sessionData = payload;\n            // Basic validation\n            if (!sessionData.id || !sessionData.email) {\n                console.error('❌ Invalid session data structure');\n                return null;\n            }\n            console.log('✅ Session validated for user:', sessionData.email);\n            return sessionData;\n        } catch (error) {\n            // Distinguish between expired and invalid tokens\n            if (error?.code === 'ERR_JWT_EXPIRED' || error?.message?.includes('exp')) {\n                console.log('⏰ Session token expired');\n            } else {\n                console.error('❌ Session retrieval error:', error);\n            }\n            return null;\n        }\n    }\n    /**\n   * Get session with automatic refresh if nearing expiration\n   */ static async getSessionWithRefresh() {\n        try {\n            const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n            const token = cookieStore.get(this.COOKIE_NAME)?.value;\n            if (!token) {\n                console.log('🔍 No session cookie found');\n                return null;\n            }\n            try {\n                const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, JWT_SECRET);\n                const sessionData = payload;\n                // Check if token is nearing expiration (less than 6 hours remaining)\n                const expiryTime = (payload.exp || 0) * 1000;\n                const timeUntilExpiry = expiryTime - Date.now();\n                if (timeUntilExpiry < this.REFRESH_WINDOW && timeUntilExpiry > 0) {\n                    console.log('🔄 Session nearing expiration, refreshing...');\n                    // Refresh the session\n                    await this.createSession(sessionData);\n                    console.log('✅ Session refreshed successfully');\n                }\n                return sessionData;\n            } catch (error) {\n                // If token is expired but within grace period (30 minutes), allow refresh\n                if (error?.code === 'ERR_JWT_EXPIRED' || error?.message?.includes('exp')) {\n                    console.log('⏰ Token expired, checking if within grace period...');\n                    try {\n                        // Decode without verification to check expiry time\n                        const decoded = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n                        const expiryTime = decoded.exp * 1000;\n                        const timeSinceExpiry = Date.now() - expiryTime;\n                        // Allow refresh if expired less than 30 minutes ago (grace period)\n                        if (timeSinceExpiry < this.GRACE_PERIOD && timeSinceExpiry > 0) {\n                            console.log('✅ Within 30-minute grace period, refreshing session...');\n                            const sessionData = decoded;\n                            await this.createSession(sessionData);\n                            return sessionData;\n                        } else {\n                            console.log('❌ Expired beyond grace period, cannot refresh');\n                        }\n                    } catch (decodeError) {\n                        console.error('❌ Error decoding expired token:', decodeError);\n                    }\n                }\n                console.error('❌ Session retrieval error:', error);\n                return null;\n            }\n        } catch (error) {\n            console.error('❌ Session refresh error:', error);\n            return null;\n        }\n    }\n    /**\n   * Get session from request (for API routes)\n   */ static async getSessionFromRequest(request) {\n        try {\n            const sessionCookie = request.cookies.get(this.COOKIE_NAME)?.value;\n            if (!sessionCookie) {\n                console.log('🔍 No session cookie found');\n                return null;\n            }\n            console.log('🍪 Raw cookie value:', sessionCookie.substring(0, 50) + '...');\n            // Verify JWT token\n            const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(sessionCookie, JWT_SECRET);\n            const sessionData = payload;\n            // Basic validation\n            if (!sessionData.id || !sessionData.email) {\n                console.error('❌ Invalid session data structure');\n                return null;\n            }\n            console.log('✅ Session found for user:', sessionData.email);\n            return sessionData;\n        } catch (error) {\n            console.error('❌ Session retrieval error:', error);\n            return null;\n        }\n    }\n    /**\n   * Clear the session cookie\n   */ static async clearSession() {\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n        cookieStore.delete(this.COOKIE_NAME);\n    }\n    /**\n   * Clear expired session cookie from request\n   */ static async clearExpiredSession(request) {\n        const token = request.cookies.get(this.COOKIE_NAME)?.value;\n        if (token) {\n            try {\n                await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, JWT_SECRET);\n            } catch (error) {\n                // Token is expired or invalid, clear it\n                if (error instanceof Error && error.message.includes('exp')) {\n                    const response = next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n                    response.cookies.delete(this.COOKIE_NAME);\n                    return;\n                }\n            }\n        }\n    }\n    /**\n   * Update session data (useful for profile updates)\n   */ static async updateSession(updates) {\n        const currentSession = await this.getSession();\n        if (!currentSession) {\n            return null;\n        }\n        const updatedSession = {\n            ...currentSession,\n            ...updates\n        };\n        await this.createSession(updatedSession);\n        return updatedSession;\n    }\n    /**\n   * Check if user has specific role\n   */ static async hasRole(role) {\n        const session = await this.getSession();\n        return session?.role === role;\n    }\n    /**\n   * Require specific role (throws if not authorized)\n   */ static async requireRole(role) {\n        const session = await this.getSession();\n        if (!session || session.role !== role) {\n            throw new Error(`Access denied. Required role: ${role}`);\n        }\n        return session;\n    }\n}\n/**\n * Middleware helper for API routes\n */ async function requireAuth(requiredRole) {\n    return async (request)=>{\n        const session = await SessionManager.getSessionFromRequest(request);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n                error: 'Authentication required'\n            }, {\n                status: 401\n            });\n        }\n        if (requiredRole && session.role !== requiredRole) {\n            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n                error: `Access denied. Required role: ${requiredRole}`\n            }, {\n                status: 403\n            });\n        }\n        return {\n            session\n        };\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/session-manager.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerClient: () => (/* binding */ createServerClient),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n// Client-side Supabase client with real-time disabled to prevent WebSocket errors\nconst supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(supabaseUrl, supabaseAnonKey, {\n    realtime: {\n        enabled: false\n    }\n});\n// Server-side Supabase client with service role key\nconst createServerClient = ()=>{\n    const serverSupabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\n    // Use anon key as fallback if service role key is invalid\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n    console.log('🔍 createServerClient: Service role key exists:', !!serviceRoleKey);\n    console.log('🔍 createServerClient: Service role key length:', serviceRoleKey?.length);\n    console.log('🔍 createServerClient: Anon key length:', anonKey?.length);\n    // Use service role key if available, otherwise fallback to anon key\n    const serverSupabaseKey = serviceRoleKey || anonKey;\n    console.log('🔍 createServerClient: Using key type:', serviceRoleKey ? 'service_role' : 'anon');\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(serverSupabaseUrl, serverSupabaseKey, {\n        auth: {\n            persistSession: false\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&page=%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&page=%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_macbook_Desktop_trpi_app_app_api_therapist_availability_template_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/therapist/availability/template/route.ts */ \"(rsc)/./app/api/therapist/availability/template/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/therapist/availability/template/route\",\n        pathname: \"/api/therapist/availability/template\",\n        filename: \"route\",\n        bundlePath: \"app/api/therapist/availability/template/route\"\n    },\n    resolvedPagePath: \"/Users/macbook/Desktop/trpi-app/app/api/therapist/availability/template/route.ts\",\n    nextConfigOutput,\n    userland: _Users_macbook_Desktop_trpi_app_app_api_therapist_availability_template_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZ0aGVyYXBpc3QlMkZhdmFpbGFiaWxpdHklMkZ0ZW1wbGF0ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGhlcmFwaXN0JTJGYXZhaWxhYmlsaXR5JTJGdGVtcGxhdGUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ0aGVyYXBpc3QlMkZhdmFpbGFiaWxpdHklMkZ0ZW1wbGF0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1hY2Jvb2slMkZEZXNrdG9wJTJGdHJwaS1hcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGbWFjYm9vayUyRkRlc2t0b3AlMkZ0cnBpLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ2dDO0FBQzdHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvbWFjYm9vay9EZXNrdG9wL3RycGktYXBwL2FwcC9hcGkvdGhlcmFwaXN0L2F2YWlsYWJpbGl0eS90ZW1wbGF0ZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3RoZXJhcGlzdC9hdmFpbGFiaWxpdHkvdGVtcGxhdGUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS90aGVyYXBpc3QvYXZhaWxhYmlsaXR5L3RlbXBsYXRlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90aGVyYXBpc3QvYXZhaWxhYmlsaXR5L3RlbXBsYXRlL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL21hY2Jvb2svRGVza3RvcC90cnBpLWFwcC9hcHAvYXBpL3RoZXJhcGlzdC9hdmFpbGFiaWxpdHkvdGVtcGxhdGUvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&page=%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/availability.ts":
/*!*******************************!*\
  !*** ./types/availability.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAYS_OF_WEEK: () => (/* binding */ DAYS_OF_WEEK),\n/* harmony export */   DEFAULT_DAY_AVAILABILITY: () => (/* binding */ DEFAULT_DAY_AVAILABILITY),\n/* harmony export */   DEFAULT_SESSION_DURATIONS: () => (/* binding */ DEFAULT_SESSION_DURATIONS),\n/* harmony export */   DEFAULT_TIME_SLOT: () => (/* binding */ DEFAULT_TIME_SLOT),\n/* harmony export */   DEFAULT_WEEKLY_AVAILABILITY: () => (/* binding */ DEFAULT_WEEKLY_AVAILABILITY),\n/* harmony export */   OVERRIDE_TYPES: () => (/* binding */ OVERRIDE_TYPES),\n/* harmony export */   SESSION_TYPES: () => (/* binding */ SESSION_TYPES)\n/* harmony export */ });\n/**\n * Enhanced 3-Level Availability System Types\n * \n * This file defines the TypeScript interfaces for the comprehensive availability system\n * that supports weekly templates, specific date overrides, and real-time availability.\n */ // ============================================================================\n// CORE AVAILABILITY TYPES\n// ============================================================================\n// ============================================================================\n// CONSTANTS\n// ============================================================================\nconst DAYS_OF_WEEK = [\n    'sunday',\n    'monday',\n    'tuesday',\n    'wednesday',\n    'thursday',\n    'friday',\n    'saturday'\n];\nconst SESSION_TYPES = [\n    'individual',\n    'group',\n    'consultation'\n];\nconst OVERRIDE_TYPES = [\n    'unavailable',\n    'custom_hours',\n    'reduced_hours'\n];\nconst DEFAULT_SESSION_DURATIONS = [\n    30,\n    45,\n    60,\n    90,\n    120\n];\nconst DEFAULT_TIME_SLOT = {\n    id: '',\n    start: '09:00',\n    end: '10:00',\n    duration: 60,\n    type: 'individual',\n    maxSessions: 1,\n    title: 'Individual Therapy Session',\n    isAvailable: true\n};\nconst DEFAULT_DAY_AVAILABILITY = {\n    enabled: false,\n    customSlots: [],\n    timeSlots: [],\n    breaks: [],\n    notes: ''\n};\nconst DEFAULT_WEEKLY_AVAILABILITY = {\n    standardHours: {\n        monday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        tuesday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        wednesday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        thursday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        friday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: true\n        },\n        saturday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: false\n        },\n        sunday: {\n            ...DEFAULT_DAY_AVAILABILITY,\n            enabled: false\n        }\n    },\n    sessionSettings: {\n        sessionDuration: 60,\n        bufferTime: 15,\n        maxSessionsPerDay: 8,\n        advanceBookingDays: 30,\n        cancellationHours: 24\n    },\n    timezone: 'UTC',\n    lastUpdated: new Date().toISOString()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./types/availability.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/jose","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&page=%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftherapist%2Favailability%2Ftemplate%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();