/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/login/route";
exports.ids = ["app/api/auth/login/route"];
exports.modules = {

/***/ "(rsc)/./app/api/auth/login/route.ts":
/*!*************************************!*\
  !*** ./app/api/auth/login/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./lib/auth.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { email, userType = 'individual' } = body;\n        console.log('üîë Login request:', {\n            email,\n            userType\n        });\n        if (!email) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Email is required'\n            }, {\n                status: 400\n            });\n        }\n        if (![\n            'individual',\n            'therapist',\n            'partner',\n            'admin'\n        ].includes(userType)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Invalid user type'\n            }, {\n                status: 400\n            });\n        }\n        // Use the new unified magic link system\n        const result = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_1__.createMagicLinkForAuthType)(email, userType, 'login', {\n            user_type: userType\n        });\n        if (result.success) {\n            console.log('‚úÖ Magic link created and sent for login:', {\n                email,\n                userType\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: `Magic link sent to ${email}. Please check your email to log in.`\n            });\n        } else {\n            console.error('‚ùå Failed to create magic link:', result.error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: result.error || 'Failed to create magic link'\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error('‚ùå Login API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2F1dGgvbG9naW4vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ0E7QUFFaEQsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxZQUFZLEVBQUUsR0FBR0g7UUFFM0NJLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUI7WUFBRUg7WUFBT0M7UUFBUztRQUVuRCxJQUFJLENBQUNELE9BQU87WUFDVixPQUFPTixxREFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRUssU0FBUztnQkFBT0MsT0FBTztZQUFvQixHQUM3QztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsSUFBSSxDQUFDO1lBQUM7WUFBYztZQUFhO1lBQVc7U0FBUSxDQUFDQyxRQUFRLENBQUNOLFdBQVc7WUFDdkUsT0FBT1AscURBQVlBLENBQUNLLElBQUksQ0FDdEI7Z0JBQUVLLFNBQVM7Z0JBQU9DLE9BQU87WUFBb0IsR0FDN0M7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLHdDQUF3QztRQUN4QyxNQUFNRSxTQUFTLE1BQU1iLHFFQUEwQkEsQ0FDN0NLLE9BQ0FDLFVBQ0EsU0FDQTtZQUFFUSxXQUFXUjtRQUFTO1FBR3hCLElBQUlPLE9BQU9KLE9BQU8sRUFBRTtZQUNsQkYsUUFBUUMsR0FBRyxDQUFDLDRDQUE0QztnQkFBRUg7Z0JBQU9DO1lBQVM7WUFDMUUsT0FBT1AscURBQVlBLENBQUNLLElBQUksQ0FBQztnQkFDdkJLLFNBQVM7Z0JBQ1RNLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRVYsTUFBTSxvQ0FBb0MsQ0FBQztZQUM1RTtRQUNGLE9BQU87WUFDTEUsUUFBUUcsS0FBSyxDQUFDLGtDQUFrQ0csT0FBT0gsS0FBSztZQUM1RCxPQUFPWCxxREFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRUssU0FBUztnQkFBT0MsT0FBT0csT0FBT0gsS0FBSyxJQUFJO1lBQThCLEdBQ3ZFO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7SUFFRixFQUFFLE9BQU9ELE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLHNCQUFzQkE7UUFDcEMsT0FBT1gscURBQVlBLENBQUNLLElBQUksQ0FDdEI7WUFBRUssU0FBUztZQUFPQyxPQUFPO1FBQXdCLEdBQ2pEO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9EZXNrdG9wL3RycGktYXBwL2FwcC9hcGkvYXV0aC9sb2dpbi9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5pbXBvcnQgeyBjcmVhdGVNYWdpY0xpbmtGb3JBdXRoVHlwZSB9IGZyb20gJ0AvbGliL2F1dGgnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgY29uc3QgeyBlbWFpbCwgdXNlclR5cGUgPSAnaW5kaXZpZHVhbCcgfSA9IGJvZHlcblxuICAgIGNvbnNvbGUubG9nKCfwn5SRIExvZ2luIHJlcXVlc3Q6JywgeyBlbWFpbCwgdXNlclR5cGUgfSlcblxuICAgIGlmICghZW1haWwpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdFbWFpbCBpcyByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKCFbJ2luZGl2aWR1YWwnLCAndGhlcmFwaXN0JywgJ3BhcnRuZXInLCAnYWRtaW4nXS5pbmNsdWRlcyh1c2VyVHlwZSkpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJbnZhbGlkIHVzZXIgdHlwZScgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gVXNlIHRoZSBuZXcgdW5pZmllZCBtYWdpYyBsaW5rIHN5c3RlbVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZU1hZ2ljTGlua0ZvckF1dGhUeXBlKFxuICAgICAgZW1haWwsXG4gICAgICB1c2VyVHlwZSBhcyAnaW5kaXZpZHVhbCcgfCAndGhlcmFwaXN0JyB8ICdwYXJ0bmVyJyB8ICdhZG1pbicsXG4gICAgICAnbG9naW4nLFxuICAgICAgeyB1c2VyX3R5cGU6IHVzZXJUeXBlIH1cbiAgICApXG4gICAgXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIE1hZ2ljIGxpbmsgY3JlYXRlZCBhbmQgc2VudCBmb3IgbG9naW46JywgeyBlbWFpbCwgdXNlclR5cGUgfSlcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6IGBNYWdpYyBsaW5rIHNlbnQgdG8gJHtlbWFpbH0uIFBsZWFzZSBjaGVjayB5b3VyIGVtYWlsIHRvIGxvZyBpbi5gXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGNyZWF0ZSBtYWdpYyBsaW5rOicsIHJlc3VsdC5lcnJvcilcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IHJlc3VsdC5lcnJvciB8fCAnRmFpbGVkIHRvIGNyZWF0ZSBtYWdpYyBsaW5rJyB9LFxuICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgIClcbiAgICB9XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgTG9naW4gQVBJIGVycm9yOicsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiY3JlYXRlTWFnaWNMaW5rRm9yQXV0aFR5cGUiLCJQT1NUIiwicmVxdWVzdCIsImJvZHkiLCJqc29uIiwiZW1haWwiLCJ1c2VyVHlwZSIsImNvbnNvbGUiLCJsb2ciLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXMiLCJpbmNsdWRlcyIsInJlc3VsdCIsInVzZXJfdHlwZSIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/login/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/audit-logger.ts":
/*!*****************************!*\
  !*** ./lib/audit-logger.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuditLogger: () => (/* binding */ AuditLogger)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://frzciymslvpohhyefmtr.supabase.co\" || 0, process.env.SUPABASE_SERVICE_ROLE_KEY || '');\n/**\n * HIPAA-compliant audit logging system\n * Logs all authentication and security events\n */ class AuditLogger {\n    /**\n   * Log an authentication event\n   */ static async logAuthEvent(userId, eventType, metadata = {}) {\n        try {\n            const logEntry = {\n                user_id: userId,\n                event_type: eventType,\n                ip_address: metadata.ip_address || null,\n                user_agent: metadata.user_agent || null,\n                device_fingerprint: metadata.device_fingerprint || null,\n                session_id: metadata.session_id || null,\n                metadata: metadata,\n                created_at: new Date().toISOString()\n            };\n            const { error } = await supabase.from('audit_logs').insert(logEntry);\n            if (error) {\n                console.error('‚ùå Audit log error:', error);\n            // Don't throw - we don't want audit logging to break the app\n            } else {\n                console.log(`üìù Audit logged: ${eventType} for user ${userId || 'anonymous'}`);\n            }\n        } catch (error) {\n            console.error('‚ùå Audit logging failed:', error);\n        // Silent fail - audit logging should never break the app\n        }\n    }\n    /**\n   * Log successful login\n   */ static async logLoginSuccess(userId, metadata) {\n        await this.logAuthEvent(userId, 'login_success', {\n            ...metadata,\n            message: 'User logged in successfully'\n        });\n    }\n    /**\n   * Log failed login attempt\n   */ static async logLoginFailure(email, reason, metadata) {\n        await this.logAuthEvent(null, 'login_failure', {\n            ...metadata,\n            email,\n            error_message: reason,\n            message: 'Login attempt failed'\n        });\n    }\n    /**\n   * Log logout event\n   */ static async logLogout(userId, metadata) {\n        await this.logAuthEvent(userId, 'logout', {\n            ...metadata,\n            message: 'User logged out'\n        });\n    }\n    /**\n   * Log session refresh\n   */ static async logSessionRefresh(userId, metadata) {\n        await this.logAuthEvent(userId, 'session_refresh', {\n            ...metadata,\n            message: 'Session token refreshed'\n        });\n    }\n    /**\n   * Log magic link sent\n   */ static async logMagicLinkSent(email, metadata) {\n        await this.logAuthEvent(null, 'magic_link_sent', {\n            ...metadata,\n            email,\n            message: 'Magic link sent to user'\n        });\n    }\n    /**\n   * Log magic link verification (success or failure)\n   */ static async logMagicLinkVerification(userId, success, metadata) {\n        await this.logAuthEvent(userId, success ? 'magic_link_verified' : 'magic_link_failed', {\n            ...metadata,\n            message: success ? 'Magic link verified successfully' : 'Magic link verification failed'\n        });\n    }\n    /**\n   * Log suspicious activity (e.g., session hijacking attempt)\n   */ static async logSuspiciousActivity(userId, activity, metadata) {\n        await this.logAuthEvent(userId, 'suspicious_activity', {\n            ...metadata,\n            activity,\n            severity: 'high',\n            message: `Suspicious activity detected: ${activity}`\n        });\n    }\n    /**\n   * Log session hijack attempt\n   */ static async logSessionHijackAttempt(userId, metadata) {\n        await this.logAuthEvent(userId, 'session_hijack_attempt', {\n            ...metadata,\n            severity: 'critical',\n            message: 'Possible session hijacking attempt detected'\n        });\n    }\n    /**\n   * Log rate limit exceeded\n   */ static async logRateLimitExceeded(identifier, action, metadata) {\n        await this.logAuthEvent(null, 'rate_limit_exceeded', {\n            ...metadata,\n            identifier,\n            action,\n            message: `Rate limit exceeded for action: ${action}`\n        });\n    }\n    /**\n   * Get recent logs for a user (for admin/debugging)\n   */ static async getUserLogs(userId, limit = 50) {\n        try {\n            const { data, error } = await supabase.from('audit_logs').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n            }).limit(limit);\n            if (error) {\n                console.error('‚ùå Error fetching user logs:', error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error('‚ùå Error fetching user logs:', error);\n            return [];\n        }\n    }\n    /**\n   * Get suspicious activity logs (for security monitoring)\n   */ static async getSuspiciousActivityLogs(limit = 100) {\n        try {\n            const { data, error } = await supabase.from('audit_logs').select('*').in('event_type', [\n                'suspicious_activity',\n                'session_hijack_attempt',\n                'rate_limit_exceeded'\n            ]).order('created_at', {\n                ascending: false\n            }).limit(limit);\n            if (error) {\n                console.error('‚ùå Error fetching suspicious activity logs:', error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error('‚ùå Error fetching suspicious activity logs:', error);\n            return [];\n        }\n    }\n    /**\n   * Archive old logs (for HIPAA compliance - retain for required period)\n   * Should be run via cron job\n   */ static async archiveOldLogs(daysToRetain = 90) {\n        const cutoffDate = new Date(Date.now() - daysToRetain * 24 * 60 * 60 * 1000);\n        try {\n            // In production, you'd move these to cold storage rather than delete\n            // For now, we'll just mark them as archived\n            const { error } = await supabase.from('audit_logs').update({\n                archived: true\n            }).lt('created_at', cutoffDate.toISOString()).eq('archived', false);\n            if (error) {\n                console.error('‚ùå Audit log archival error:', error);\n            } else {\n                console.log(`‚úÖ Archived audit logs older than ${daysToRetain} days`);\n            }\n        } catch (error) {\n            console.error('‚ùå Audit log archival failed:', error);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/audit-logger.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMagicLink: () => (/* binding */ createMagicLink),\n/* harmony export */   createMagicLinkForAuthType: () => (/* binding */ createMagicLinkForAuthType),\n/* harmony export */   verifyMagicLink: () => (/* binding */ verifyMagicLink),\n/* harmony export */   verifyMagicLinkForAuthType: () => (/* binding */ verifyMagicLinkForAuthType)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _email__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./email */ \"(rsc)/./lib/email.ts\");\n/* harmony import */ var _supabase_auth_sync__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./supabase-auth-sync */ \"(rsc)/./lib/supabase-auth-sync.ts\");\n/* harmony import */ var _rate_limit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rate-limit */ \"(rsc)/./lib/rate-limit.ts\");\n/* harmony import */ var _audit_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./audit-logger */ \"(rsc)/./lib/audit-logger.ts\");\n\n\n\n\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__.createClient)(\"https://frzciymslvpohhyefmtr.supabase.co\" || 0, process.env.SUPABASE_SERVICE_ROLE_KEY || '');\n/**\n * Get magic link expiry based on user email domain\n * Healthcare workers get 15 minutes for security\n * Regular users get 24 hours for convenience\n */ function getMagicLinkExpiry(email) {\n    const healthcareDomains = [\n        '@clinic.',\n        '@hospital.',\n        '@health.',\n        '@medical.',\n        '.med',\n        '.health'\n    ];\n    const isHealthcareUser = healthcareDomains.some((domain)=>email.toLowerCase().includes(domain));\n    if (isHealthcareUser) {\n        console.log('üè• Healthcare user detected, using 15-minute magic link expiry');\n        return 15 * 60 * 1000 // 15 minutes for healthcare workers\n        ;\n    }\n    console.log('üë§ Regular user, using 24-hour magic link expiry');\n    return 24 * 60 * 60 * 1000 // 24 hours for regular users\n    ;\n}\n// Unified function to create magic link for any auth type\nasync function createMagicLinkForAuthType(email, authType, type = 'login', metadata) {\n    console.log('üîë createMagicLinkForAuthType called:', {\n        email,\n        authType,\n        type,\n        metadata\n    });\n    try {\n        // Rate limiting check - 10 magic links per hour per email\n        const rateLimitAllowed = await _rate_limit__WEBPACK_IMPORTED_MODULE_3__.RateLimiter.checkMagicLinkRequest(email);\n        if (!rateLimitAllowed) {\n            console.warn('‚ö†Ô∏è Rate limit exceeded for magic link request:', email);\n            await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logRateLimitExceeded(email, 'magic_link_request', {\n                email,\n                authType,\n                type\n            });\n            return {\n                success: false,\n                error: 'Too many requests. Please try again in an hour.'\n            };\n        }\n        const token = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        const expiryDuration = getMagicLinkExpiry(email);\n        const expiresAt = new Date(Date.now() + expiryDuration);\n        console.log('‚úÖ Token created:', {\n            token: token.substring(0, 8) + '...',\n            expiresAt: expiresAt.toISOString(),\n            now: new Date().toISOString()\n        });\n        const { error } = await supabase.from('magic_links').insert({\n            email,\n            token,\n            type,\n            auth_type: authType,\n            expires_at: expiresAt.toISOString(),\n            metadata: {\n                ...metadata,\n                auth_type: authType\n            }\n        });\n        if (error) {\n            console.error('‚ùå Error creating magic link:', error);\n            throw error;\n        }\n        console.log('‚úÖ Magic link created successfully for auth type:', authType);\n        // Send the magic link email\n        const baseUrl = \"http://localhost:3000\" || 0;\n        const verificationUrl = `${baseUrl}/api/auth/verify-magic-link?token=${token}&auth_type=${authType}`;\n        console.log('üìß Sending magic link email...');\n        const emailResult = await (0,_email__WEBPACK_IMPORTED_MODULE_1__.sendMagicLinkEmail)(email, verificationUrl, type, {\n            ...metadata,\n            auth_type: authType\n        });\n        if (!emailResult.success) {\n            console.error('‚ùå Failed to send magic link email:', emailResult.error);\n            // Don't fail the entire request if email fails, just log it\n            console.log('‚ö†Ô∏è Magic link created but email failed to send. Token:', token.substring(0, 8) + '...');\n        } else {\n            console.log('‚úÖ Magic link email sent successfully');\n            // Audit log: Magic link sent\n            await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logMagicLinkSent(email, {\n                email,\n                authType,\n                type,\n                expiryDuration: expiryDuration / 1000 / 60,\n                expiresAt: expiresAt.toISOString()\n            });\n        }\n        return {\n            success: true,\n            token\n        };\n    } catch (error) {\n        console.error('‚ùå createMagicLinkForAuthType error:', error);\n        return {\n            success: false,\n            error: 'Failed to create magic link'\n        };\n    }\n}\n// Unified function to verify magic link for any auth type\nasync function verifyMagicLinkForAuthType(token, authType) {\n    console.log('üîç verifyMagicLinkForAuthType called with token:', token.substring(0, 8) + '...', 'authType:', authType);\n    try {\n        // Rate limiting check - 3 attempts per token\n        const rateLimitAllowed = await _rate_limit__WEBPACK_IMPORTED_MODULE_3__.RateLimiter.checkMagicLinkVerification(token);\n        if (!rateLimitAllowed) {\n            console.warn('‚ö†Ô∏è Rate limit exceeded for magic link verification');\n            await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logRateLimitExceeded(token, 'magic_link_verify', {\n                token: token.substring(0, 8) + '...',\n                authType\n            });\n            return {\n                success: false,\n                error: 'Too many verification attempts. Please request a new magic link.'\n            };\n        }\n        // Find the magic link\n        console.log('üîç Looking up magic link in database...');\n        const { data: magicLink, error: magicLinkError } = await supabase.from('magic_links').select('*').eq('token', token).eq('auth_type', authType).is('used_at', null).single();\n        if (magicLinkError) {\n            console.error('‚ùå Magic link lookup error:', magicLinkError);\n            await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logMagicLinkVerification(null, false, {\n                token: token.substring(0, 8) + '...',\n                authType,\n                error_message: 'Database lookup error'\n            });\n            return {\n                success: false,\n                error: 'Invalid or expired magic link'\n            };\n        }\n        if (!magicLink) {\n            console.log('‚ùå Magic link not found or already used');\n            await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logMagicLinkVerification(null, false, {\n                token: token.substring(0, 8) + '...',\n                authType,\n                error_message: 'Magic link not found or already used'\n            });\n            return {\n                success: false,\n                error: 'Invalid or expired magic link'\n            };\n        }\n        console.log('‚úÖ Magic link found:', {\n            id: magicLink.id,\n            email: magicLink.email,\n            type: magicLink.type,\n            auth_type: magicLink.auth_type,\n            expiresAt: magicLink.expires_at\n        });\n        // Check if expired\n        const now = new Date();\n        const expiresAt = new Date(magicLink.expires_at);\n        if (expiresAt < now) {\n            console.log('‚ùå Magic link expired');\n            return {\n                success: false,\n                error: 'Magic link has expired. Please request a new one.'\n            };\n        }\n        // Mark magic link as used with atomic update to prevent race condition\n        // This ensures only ONE request can mark it as used\n        const { data: updatedLink, error: updateError } = await supabase.from('magic_links').update({\n            used_at: now.toISOString(),\n            updated_at: now.toISOString()\n        }).eq('id', magicLink.id).is('used_at', null) // Critical: Only update if still unused\n        .select().single();\n        if (updateError || !updatedLink) {\n            console.error('‚ùå Magic link already used or update failed:', updateError);\n            return {\n                success: false,\n                error: 'Magic link already used or expired. Please request a new one.'\n            };\n        }\n        console.log('‚úÖ Magic link marked as used atomically');\n        // Get or create user\n        console.log('üîç Getting or creating user...');\n        const { data: user, error: userError } = await supabase.from('users').select('*').eq('email', magicLink.email).single();\n        if (userError && userError.code !== 'PGRST116') {\n            console.error('‚ùå Error getting user:', userError);\n            return {\n                success: false,\n                error: 'Error accessing user account'\n            };\n        }\n        let finalUser = user;\n        // If user doesn't exist and this is a signup, create them\n        if (!user && magicLink.type === 'signup') {\n            console.log('üë§ Creating new user with Supabase Auth sync...');\n            const createResult = await (0,_supabase_auth_sync__WEBPACK_IMPORTED_MODULE_2__.createUserWithSupabaseAuth)({\n                email: magicLink.email,\n                full_name: magicLink.metadata?.first_name || magicLink.email.split('@')[0],\n                user_type: authType\n            });\n            if (!createResult.success) {\n                console.error('‚ùå Error creating user with Supabase Auth sync:', createResult.error);\n                return {\n                    success: false,\n                    error: 'Error creating user account'\n                };\n            }\n            // Get the created user from database\n            const { data: newUser, error: fetchError } = await supabase.from('users').select('*').eq('id', createResult.user_id).single();\n            if (fetchError || !newUser) {\n                console.error('‚ùå Error fetching newly created user:', fetchError);\n                return {\n                    success: false,\n                    error: 'Error accessing new user account'\n                };\n            }\n            finalUser = newUser;\n            console.log('‚úÖ New user created with Supabase Auth sync:', finalUser.id);\n        } else if (!user && magicLink.type === 'login') {\n            console.log('‚ùå User not found for login');\n            return {\n                success: false,\n                error: 'User account not found. Please sign up first.'\n            };\n        } else if (user && magicLink.type === 'login') {\n            console.log('‚úÖ Existing user found for login:', user.email);\n            // Verify user type matches\n            if (user.user_type !== authType) {\n                console.log('‚ùå User type mismatch:', user.user_type, 'vs', authType);\n                return {\n                    success: false,\n                    error: 'Invalid user type for this login'\n                };\n            }\n        }\n        // Create session token and store in database\n        console.log('üîë Creating session token and storing in database...');\n        const sessionToken = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        const sessionExpiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days\n        ;\n        // Clear any existing sessions for this user\n        await supabase.from('user_sessions').delete().eq('user_id', finalUser.id);\n        // Create new session in database\n        const { error: sessionError } = await supabase.from('user_sessions').insert({\n            user_id: finalUser.id,\n            session_token: sessionToken,\n            expires_at: sessionExpiresAt.toISOString(),\n            created_at: now.toISOString(),\n            last_accessed_at: now.toISOString()\n        });\n        if (sessionError) {\n            console.error('‚ùå Error creating session:', sessionError);\n            return {\n                success: false,\n                error: 'Error creating session'\n            };\n        }\n        console.log('‚úÖ Session created and stored in database');\n        // Update user's last login and mark as verified\n        await supabase.from('users').update({\n            last_login_at: now.toISOString(),\n            is_verified: true // Mark user as verified after successful magic link verification\n        }).eq('id', finalUser.id);\n        // Audit log: Successful magic link verification\n        await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logMagicLinkVerification(finalUser.id, true, {\n            email: finalUser.email,\n            authType,\n            magicLinkType: magicLink.type\n        });\n        // Audit log: Login success\n        await _audit_logger__WEBPACK_IMPORTED_MODULE_4__.AuditLogger.logLoginSuccess(finalUser.id, {\n            email: finalUser.email,\n            authType,\n            loginMethod: 'magic_link'\n        });\n        return {\n            success: true,\n            user: {\n                ...finalUser,\n                is_verified: true,\n                session_token: sessionToken\n            }\n        };\n    } catch (error) {\n        console.error('‚ùå verifyMagicLinkForAuthType error:', error);\n        return {\n            success: false,\n            error: 'Internal server error'\n        };\n    }\n}\n// Legacy functions for backward compatibility\nasync function createMagicLink(email, type, metadata) {\n    return createMagicLinkForAuthType(email, 'individual', type, metadata);\n}\nasync function verifyMagicLink(token) {\n    return verifyMagicLinkForAuthType(token, 'individual');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/email.ts":
/*!**********************!*\
  !*** ./lib/email.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendMagicLinkEmail: () => (/* binding */ sendMagicLinkEmail),\n/* harmony export */   sendPasswordResetEmail: () => (/* binding */ sendPasswordResetEmail),\n/* harmony export */   sendVerificationEmail: () => (/* binding */ sendVerificationEmail)\n/* harmony export */ });\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodemailer */ \"(rsc)/./node_modules/nodemailer/lib/nodemailer.js\");\n\n// Create Brevo SMTP transporter\nfunction createTransporter() {\n    if (!process.env.BREVO_SMTP_USER || !process.env.BREVO_SMTP_PASS) {\n        console.warn('Brevo SMTP credentials not configured - email sending will be disabled');\n        return null;\n    }\n    // Use a proper sender email address\n    const senderEmail = process.env.SENDER_EMAIL || 'noreply@trpi.com';\n    return nodemailer__WEBPACK_IMPORTED_MODULE_0__.createTransport({\n        host: 'smtp-relay.brevo.com',\n        port: 587,\n        secure: false,\n        auth: {\n            user: process.env.BREVO_SMTP_USER,\n            pass: process.env.BREVO_SMTP_PASS\n        },\n        tls: {\n            rejectUnauthorized: false\n        }\n    });\n}\nasync function sendVerificationEmail(email, token) {\n    const transporter = createTransporter();\n    if (!transporter) {\n        console.warn('Email transporter not available - skipping email send');\n        return {\n            success: false,\n            error: 'Email service not configured'\n        };\n    }\n    const verificationUrl = `${\"http://localhost:3000\" || 0}/api/auth/verify-email?email=${email}&token=${token}`;\n    const senderEmail = process.env.SENDER_EMAIL || 'noreply@trpi.com';\n    const mailOptions = {\n        from: `Michael from Quiet  <${senderEmail}>`,\n        to: email,\n        subject: 'Welcome to Thequietherapy.live - Access Your Dashboard',\n        html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #3b82f6;\">Welcome to Quiet!</h2>\n        <p>Your account has been created successfully! Click the button below to access your dashboard and start your therapy journey:</p>\n        <a href=\"${verificationUrl}\" style=\"display: inline-block; background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0;\">\n          üöÄ Access Your Dashboard\n        </a>\n        <p>If the button doesn't work, copy and paste this link into your browser:</p>\n        <p style=\"word-break: break-all; color: #6b7280;\">${verificationUrl}</p>\n        <p>From your dashboard, you can:</p>\n        <ul style=\"color: #6b7280;\">\n          <li>Book therapy sessions</li>\n          <li>Manage your appointments</li>\n          <li>Track your progress</li>\n          <li>Access your credits and packages</li>\n        </ul>\n        <p>Best regards,<br>The Quiet Team</p>\n      </div>\n    `\n    };\n    try {\n        const info = await transporter.sendMail(mailOptions);\n        console.log('Verification email sent successfully:', info.messageId);\n        return {\n            success: true,\n            messageId: info.messageId\n        };\n    } catch (error) {\n        console.error('Failed to send verification email:', error);\n        return {\n            success: false,\n            error: 'Failed to send email'\n        };\n    }\n}\nasync function sendPasswordResetEmail(email, token) {\n    const transporter = createTransporter();\n    if (!transporter) {\n        console.warn('Email transporter not available - skipping email send');\n        return {\n            success: false,\n            error: 'Email service not configured'\n        };\n    }\n    const resetUrl = `${\"http://localhost:3000\" || 0}/reset-password?token=${token}`;\n    const senderEmail = process.env.SENDER_EMAIL || 'noreply@trpi.com';\n    const mailOptions = {\n        from: `Quiet <${senderEmail}>`,\n        to: email,\n        subject: 'Reset your Quiet password',\n        html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #3b82f6;\">Password Reset Request</h2>\n        <p>You requested to reset your password. Click the button below to create a new password:</p>\n        <a href=\"${resetUrl}\" style=\"display: inline-block; background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0;\">\n          Reset Password\n        </a>\n        <p>If you didn't request this, you can safely ignore this email.</p>\n        <p>This link will expire in 1 hour.</p>\n        <p>Best regards,<br>The Quiet Team</p>\n      </div>\n    `\n    };\n    try {\n        const info = await transporter.sendMail(mailOptions);\n        console.log('Password reset email sent successfully:', info.messageId);\n        return {\n            success: true,\n            messageId: info.messageId\n        };\n    } catch (error) {\n        console.error('Failed to send password reset email:', error);\n        return {\n            success: false,\n            error: 'Failed to send email'\n        };\n    }\n}\nasync function sendMagicLinkEmail(email, verificationUrl, type, metadata) {\n    console.log('üìß sendMagicLinkEmail called with:', {\n        email,\n        verificationUrl,\n        type,\n        metadata\n    });\n    const transporter = createTransporter();\n    console.log('üìß Transporter created:', !!transporter);\n    if (!transporter) {\n        console.warn('Email transporter not available - logging magic link instead');\n        console.log('üîó MAGIC LINK FOR TESTING:');\n        console.log('Email:', email);\n        console.log('URL:', verificationUrl);\n        console.log('Type:', type);\n        console.log('Metadata:', metadata);\n        console.log('üîó END MAGIC LINK');\n        return {\n            success: true,\n            error: 'Email service not configured - link logged to console'\n        };\n    }\n    let subject = '';\n    let title = '';\n    let description = '';\n    // Determine user type for specific messaging\n    const userType = metadata?.user_type || 'individual';\n    switch(type){\n        case 'booking':\n            subject = 'Confirm Your Therapy Session Booking';\n            title = 'Confirm Your Booking';\n            description = `Hi ${metadata?.first_name || 'there'}, your therapy session has been booked successfully! Click the link below to confirm your details and access your dashboard:`;\n            break;\n        case 'login':\n            if (userType === 'therapist') {\n                subject = 'Login to Your Quiet Therapist Dashboard';\n                title = 'Login to Therapist Dashboard';\n                description = 'Click the link below to securely log in to your Quiet therapist dashboard:';\n            } else if (userType === 'partner') {\n                subject = 'Login to Your Quiet Partner Portal';\n                title = 'Login to Partner Portal';\n                description = 'Click the link below to securely log in to your Quiet partner portal:';\n            } else {\n                subject = 'Login to Your Quiet Account';\n                title = 'Login to Quiet';\n                description = 'Click the link below to securely log in to your Quiet account:';\n            }\n            break;\n        case 'signup':\n            if (userType === 'therapist') {\n                subject = 'Welcome to Quiet - Complete Your Therapist Registration';\n                title = 'Welcome to Quiet!';\n                description = `Hi ${metadata?.first_name || 'there'}, welcome to Quiet! Click the link below to complete your therapist registration and access your professional dashboard:`;\n            } else if (userType === 'partner') {\n                subject = 'Welcome to Trpi - Complete Your Partner Onboarding';\n                title = 'Welcome to Trpi!';\n                description = `Hi ${metadata?.first_name || 'there'}, welcome to Trpi! Click the link below to complete your partner onboarding and access your organization dashboard:`;\n            } else {\n                subject = 'Welcome to Trpi - Confirm Your Account';\n                title = 'Welcome to Trpi!';\n                description = `Hi ${metadata?.first_name || 'there'}, welcome to Trpi! Click the link below to confirm your account and start your therapy journey:`;\n            }\n            break;\n    }\n    const senderEmail = process.env.SENDER_EMAIL || 'noreply@trpi.com';\n    const mailOptions = {\n        from: `Quiet <${senderEmail}>`,\n        to: email,\n        subject: subject,\n        html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #3b82f6;\">${title}</h2>\n        <p>${description}</p>\n        <a href=\"${verificationUrl}\" style=\"display: inline-block; background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0;\">\n          ${type === 'booking' ? 'Confirm & Access Dashboard' : type === 'login' ? userType === 'therapist' ? 'Login to Therapist Dashboard' : userType === 'partner' ? 'Login to Partner Portal' : 'Login to Account' : userType === 'therapist' ? 'Complete Therapist Registration' : userType === 'partner' ? 'Complete Partner Onboarding' : 'Confirm Account'}\n        </a>\n        <p>If the button doesn't work, copy and paste this link into your browser:</p>\n        <p style=\"word-break: break-all; color: #6b7280;\">${verificationUrl}</p>\n        <p>This link will expire in 24 hours.</p>\n        <p>Best regards,<br>The Quiet Team</p>\n      </div>\n    `\n    };\n    try {\n        const info = await transporter.sendMail(mailOptions);\n        console.log('Magic link email sent successfully:', info.messageId);\n        return {\n            success: true,\n            messageId: info.messageId\n        };\n    } catch (error) {\n        console.error('Failed to send magic link email:', error);\n        return {\n            success: false,\n            error: 'Failed to send email'\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/email.ts\n");

/***/ }),

/***/ "(rsc)/./lib/rate-limit.ts":
/*!***************************!*\
  !*** ./lib/rate-limit.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RateLimiter: () => (/* binding */ RateLimiter),\n/* harmony export */   withRateLimit: () => (/* binding */ withRateLimit)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://frzciymslvpohhyefmtr.supabase.co\" || 0, process.env.SUPABASE_SERVICE_ROLE_KEY || '');\n/**\n * Rate limiting system for authentication endpoints\n * Prevents brute force attacks and abuse\n */ class RateLimiter {\n    /**\n   * Check if rate limit is exceeded\n   * Returns true if allowed, false if rate limited\n   */ static async checkLimit(config) {\n        const { maxAttempts, windowMs, identifier, action } = config;\n        const now = new Date();\n        const windowStart = new Date(now.getTime() - windowMs);\n        try {\n            // Count recent attempts\n            const { data: attempts, error } = await supabase.from('rate_limit_attempts').select('id').eq('identifier', identifier).eq('action', action).gte('created_at', windowStart.toISOString());\n            if (error) {\n                console.error('‚ùå Rate limit check error:', error);\n                // On error, allow request (fail open for better UX)\n                return true;\n            }\n            const attemptCount = attempts?.length || 0;\n            console.log(`üîç Rate limit check: ${attemptCount}/${maxAttempts} attempts for ${action} by ${identifier}`);\n            if (attemptCount >= maxAttempts) {\n                console.warn(`‚ö†Ô∏è Rate limit exceeded: ${action} by ${identifier}`);\n                return false;\n            }\n            // Log this attempt\n            await supabase.from('rate_limit_attempts').insert({\n                identifier,\n                action,\n                created_at: now.toISOString(),\n                ip_address: identifier.includes('.') ? identifier : null // Store IP if identifier is an IP\n            });\n            return true;\n        } catch (error) {\n            console.error('‚ùå Rate limit error:', error);\n            // Fail open - allow request if rate limiting fails\n            return true;\n        }\n    }\n    /**\n   * Check magic link requests\n   * 10 requests per hour per email\n   */ static async checkMagicLinkRequest(email) {\n        return this.checkLimit({\n            identifier: email.toLowerCase(),\n            action: 'magic_link_request',\n            maxAttempts: 10,\n            windowMs: 60 * 60 * 1000 // 1 hour\n        });\n    }\n    /**\n   * Check authentication attempts from IP\n   * 100 attempts per hour per IP\n   */ static async checkAuthAttempts(ipAddress) {\n        return this.checkLimit({\n            identifier: ipAddress,\n            action: 'auth_attempt',\n            maxAttempts: 100,\n            windowMs: 60 * 60 * 1000 // 1 hour\n        });\n    }\n    /**\n   * Check failed validation attempts\n   * 5 failures per minute per session\n   */ static async checkFailedValidation(sessionId) {\n        return this.checkLimit({\n            identifier: sessionId,\n            action: 'failed_validation',\n            maxAttempts: 5,\n            windowMs: 60 * 1000 // 1 minute\n        });\n    }\n    /**\n   * Check magic link verification attempts\n   * 3 attempts per token (prevent brute force)\n   */ static async checkMagicLinkVerification(token) {\n        return this.checkLimit({\n            identifier: `token_${token}`,\n            action: 'magic_link_verify',\n            maxAttempts: 3,\n            windowMs: 60 * 60 * 1000 // 1 hour\n        });\n    }\n    /**\n   * Clean up old rate limit records\n   * Should be run periodically (e.g., via cron job)\n   */ static async cleanup() {\n        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        try {\n            const { error } = await supabase.from('rate_limit_attempts').delete().lt('created_at', oneDayAgo.toISOString());\n            if (error) {\n                console.error('‚ùå Rate limit cleanup error:', error);\n            } else {\n                console.log('‚úÖ Rate limit records cleaned up');\n            }\n        } catch (error) {\n            console.error('‚ùå Rate limit cleanup failed:', error);\n        }\n    }\n    /**\n   * Get remaining attempts for an action\n   * Useful for showing users how many attempts they have left\n   */ static async getRemainingAttempts(config) {\n        const { maxAttempts, windowMs, identifier, action } = config;\n        const windowStart = new Date(Date.now() - windowMs);\n        try {\n            const { data: attempts, error } = await supabase.from('rate_limit_attempts').select('id').eq('identifier', identifier).eq('action', action).gte('created_at', windowStart.toISOString());\n            if (error) {\n                return maxAttempts // On error, assume full attempts available\n                ;\n            }\n            const attemptCount = attempts?.length || 0;\n            return Math.max(0, maxAttempts - attemptCount);\n        } catch (error) {\n            return maxAttempts;\n        }\n    }\n}\n/**\n * Middleware helper for rate limiting in API routes\n */ async function withRateLimit(identifier, action, maxAttempts, windowMs, handler) {\n    const allowed = await RateLimiter.checkLimit({\n        identifier,\n        action,\n        maxAttempts,\n        windowMs\n    });\n    if (!allowed) {\n        throw new Error('RATE_LIMIT_EXCEEDED: Too many requests. Please try again later.');\n    }\n    return handler();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/rate-limit.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-auth-sync.ts":
/*!***********************************!*\
  !*** ./lib/supabase-auth-sync.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkUserInSupabaseAuth: () => (/* binding */ checkUserInSupabaseAuth),\n/* harmony export */   createUserWithSupabaseAuth: () => (/* binding */ createUserWithSupabaseAuth),\n/* harmony export */   getAllSupabaseAuthUsers: () => (/* binding */ getAllSupabaseAuthUsers),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   syncAllUsersToSupabaseAuth: () => (/* binding */ syncAllUsersToSupabaseAuth),\n/* harmony export */   syncUserToSupabaseAuth: () => (/* binding */ syncUserToSupabaseAuth)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n\n\nconst supabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseServiceKey);\n/**\n * Sync a single user with Supabase Auth\n */ async function syncUserToSupabaseAuth(userData) {\n    try {\n        console.log('üîÑ Syncing user to Supabase Auth:', userData.email);\n        // Check if user exists in Supabase Auth\n        const { data: existingAuthUser, error: getUserError } = await supabaseAdmin.auth.admin.getUserById(userData.id);\n        if (getUserError && getUserError.message !== 'User not found') {\n            console.error('‚ùå Error checking existing auth user:', getUserError);\n            return {\n                success: false,\n                error: getUserError.message\n            };\n        }\n        if (existingAuthUser?.user) {\n            // User exists in Supabase Auth - update metadata\n            console.log('‚úÖ User exists in Supabase Auth, updating metadata');\n            const { data: updatedUser, error: updateError } = await supabaseAdmin.auth.admin.updateUserById(userData.id, {\n                email: userData.email,\n                user_metadata: {\n                    full_name: userData.full_name,\n                    user_type: userData.user_type,\n                    custom_user_id: userData.id,\n                    synced_at: new Date().toISOString()\n                }\n            });\n            if (updateError) {\n                console.error('‚ùå Error updating Supabase Auth user:', updateError);\n                return {\n                    success: false,\n                    error: updateError.message\n                };\n            }\n            return {\n                success: true,\n                action: 'updated',\n                auth_user_id: updatedUser.user.id\n            };\n        } else {\n            // User doesn't exist in Supabase Auth - create them\n            console.log('üë§ Creating new user in Supabase Auth');\n            const { data: newAuthUser, error: createError } = await supabaseAdmin.auth.admin.createUser({\n                id: userData.id,\n                email: userData.email,\n                email_confirm: true,\n                user_metadata: {\n                    full_name: userData.full_name,\n                    user_type: userData.user_type,\n                    custom_user_id: userData.id,\n                    synced_at: new Date().toISOString()\n                }\n            });\n            if (createError) {\n                console.error('‚ùå Error creating Supabase Auth user:', createError);\n                return {\n                    success: false,\n                    error: createError.message\n                };\n            }\n            return {\n                success: true,\n                action: 'created',\n                auth_user_id: newAuthUser.user.id\n            };\n        }\n    } catch (error) {\n        console.error('‚ùå syncUserToSupabaseAuth error:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\n/**\n * Create a new user in both your database and Supabase Auth\n */ async function createUserWithSupabaseAuth(userData) {\n    try {\n        console.log('üë§ Creating new user with Supabase Auth sync:', userData.email);\n        // Create user in Supabase Auth first\n        const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\n            email: userData.email,\n            email_confirm: true,\n            user_metadata: {\n                full_name: userData.full_name,\n                user_type: userData.user_type,\n                created_at: new Date().toISOString()\n            }\n        });\n        if (authError) {\n            console.error('‚ùå Supabase Auth creation error:', authError);\n            return {\n                success: false,\n                error: authError.message\n            };\n        }\n        const userId = authUser.user.id;\n        // Now create user in your database with the same ID\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // Set verification and active status based on user type\n        // Therapists need manual approval, others can be auto-verified\n        const isVerified = userData.user_type !== 'therapist';\n        const isActive = userData.user_type !== 'therapist';\n        const { error: dbError } = await supabase.from('users').insert({\n            id: userId,\n            email: userData.email,\n            full_name: userData.full_name,\n            user_type: userData.user_type,\n            is_verified: isVerified,\n            is_active: isActive,\n            credits: userData.user_type === 'partner' ? 100 : 0,\n            package_type: userData.user_type === 'partner' ? 'starter' : 'free'\n        });\n        if (dbError) {\n            console.error('‚ùå Database user creation error:', dbError);\n            // Try to clean up the Supabase Auth user if database creation fails\n            await supabaseAdmin.auth.admin.deleteUser(userId);\n            return {\n                success: false,\n                error: dbError.message\n            };\n        }\n        console.log('‚úÖ User created successfully in both systems:', userId);\n        return {\n            success: true,\n            user_id: userId,\n            auth_user_id: authUser.user.id\n        };\n    } catch (error) {\n        console.error('‚ùå createUserWithSupabaseAuth error:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\n/**\n * Sync all users from your database to Supabase Auth\n */ async function syncAllUsersToSupabaseAuth() {\n    try {\n        console.log('üîÑ Starting bulk user sync to Supabase Auth...');\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // Get all users from your database\n        const { data: users, error: fetchError } = await supabase.from('users').select('id, email, full_name, user_type');\n        if (fetchError) {\n            console.error('‚ùå Error fetching users:', fetchError);\n            return {\n                success: false,\n                error: fetchError.message\n            };\n        }\n        if (!users || users.length === 0) {\n            return {\n                success: true,\n                message: 'No users found to sync',\n                syncedCount: 0\n            };\n        }\n        console.log(`üìä Found ${users.length} users to sync`);\n        const results = [];\n        let successCount = 0;\n        let errorCount = 0;\n        for (const user of users){\n            const result = await syncUserToSupabaseAuth({\n                id: user.id,\n                email: user.email,\n                full_name: user.full_name,\n                user_type: user.user_type\n            });\n            results.push({\n                userId: user.id,\n                email: user.email,\n                ...result\n            });\n            if (result.success) {\n                successCount++;\n            } else {\n                errorCount++;\n            }\n            // Add a small delay to avoid rate limiting\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n        console.log(`‚úÖ Sync completed: ${successCount} successful, ${errorCount} errors`);\n        return {\n            success: true,\n            totalUsers: users.length,\n            successCount,\n            errorCount,\n            results\n        };\n    } catch (error) {\n        console.error('‚ùå syncAllUsersToSupabaseAuth error:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\n/**\n * Check if a user exists in Supabase Auth\n */ async function checkUserInSupabaseAuth(userId) {\n    try {\n        const { data: authUser, error } = await supabaseAdmin.auth.admin.getUserById(userId);\n        if (error && error.message !== 'User not found') {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        return {\n            success: true,\n            exists: !!authUser?.user,\n            user: authUser?.user || null\n        };\n    } catch (error) {\n        console.error('‚ùå checkUserInSupabaseAuth error:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\n/**\n * Get all users from Supabase Auth\n */ async function getAllSupabaseAuthUsers() {\n    try {\n        const { data: users, error } = await supabaseAdmin.auth.admin.listUsers();\n        if (error) {\n            console.error('‚ùå getAllSupabaseAuthUsers error:', error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        return {\n            success: true,\n            users: users?.users || []\n        };\n    } catch (error) {\n        console.error('‚ùå getAllSupabaseAuthUsers error:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-auth-sync.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerClient: () => (/* binding */ createServerClient),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n// Client-side Supabase client with real-time disabled to prevent WebSocket errors\nconst supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(supabaseUrl, supabaseAnonKey, {\n    realtime: {\n        enabled: false\n    }\n});\n// Server-side Supabase client with service role key\nconst createServerClient = ()=>{\n    const serverSupabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\n    // Use anon key as fallback if service role key is invalid\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n    console.log('üîç createServerClient: Service role key exists:', !!serviceRoleKey);\n    console.log('üîç createServerClient: Service role key length:', serviceRoleKey?.length);\n    console.log('üîç createServerClient: Anon key length:', anonKey?.length);\n    // Use service role key if available, otherwise fallback to anon key\n    const serverSupabaseKey = serviceRoleKey || anonKey;\n    console.log('üîç createServerClient: Using key type:', serviceRoleKey ? 'service_role' : 'anon');\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(serverSupabaseUrl, serverSupabaseKey, {\n        auth: {\n            persistSession: false\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_macbook_Desktop_trpi_app_app_api_auth_login_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/login/route.ts */ \"(rsc)/./app/api/auth/login/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/login/route\",\n        pathname: \"/api/auth/login\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/login/route\"\n    },\n    resolvedPagePath: \"/Users/macbook/Desktop/trpi-app/app/api/auth/login/route.ts\",\n    nextConfigOutput,\n    userland: _Users_macbook_Desktop_trpi_app_app_api_auth_login_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGbG9naW4lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkZsb2dpbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkZsb2dpbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1hY2Jvb2slMkZEZXNrdG9wJTJGdHJwaS1hcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGbWFjYm9vayUyRkRlc2t0b3AlMkZ0cnBpLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ1c7QUFDeEY7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9tYWNib29rL0Rlc2t0b3AvdHJwaS1hcHAvYXBwL2FwaS9hdXRoL2xvZ2luL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXV0aC9sb2dpbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2F1dGgvbG9naW5cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvbG9naW4vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbWFjYm9vay9EZXNrdG9wL3RycGktYXBwL2FwcC9hcGkvYXV0aC9sb2dpbi9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/cookie","vendor-chunks/nodemailer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmacbook%2FDesktop%2Ftrpi-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();