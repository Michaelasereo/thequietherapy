"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_daily_ts";
exports.ids = ["_rsc_lib_daily_ts"];
exports.modules = {

/***/ "(rsc)/./lib/daily.ts":
/*!**********************!*\
  !*** ./lib/daily.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMeetingToken: () => (/* binding */ createMeetingToken),\n/* harmony export */   createTherapySessionRoom: () => (/* binding */ createTherapySessionRoom),\n/* harmony export */   deleteDailyRoom: () => (/* binding */ deleteDailyRoom),\n/* harmony export */   generateMeetingToken: () => (/* binding */ generateMeetingToken),\n/* harmony export */   getRoomInfo: () => (/* binding */ getRoomInfo),\n/* harmony export */   startSessionRecording: () => (/* binding */ startSessionRecording),\n/* harmony export */   stopSessionRecording: () => (/* binding */ stopSessionRecording)\n/* harmony export */ });\n// Daily.co integration for therapy sessions\nconst DAILY_API_KEY = process.env.DAILY_API_KEY;\nconst DAILY_API_URL = 'https://api.daily.co/v1';\nasync function createTherapySessionRoom(options) {\n    if (!DAILY_API_KEY) {\n        console.error('‚ùå Daily.co API key not configured');\n        throw new Error('DAILY_API_KEY is not configured');\n    }\n    console.log('üîç Daily.co API key configured, creating room...');\n    const { sessionId, therapistName, patientName, duration, scheduledTime } = options;\n    // Create a unique room name\n    const roomName = `therapy-session-${sessionId}-${Date.now()}`;\n    // ONLY 30 MINUTES for Daily.co (therapy session only)\n    // The buffer period is handled by your app, not Daily.co\n    const THERAPY_DURATION_MINUTES = 30; // Therapy session is 30 minutes\n    const expirationTime = new Date(scheduledTime.getTime() + THERAPY_DURATION_MINUTES * 60 * 1000);\n    // Try different configurations in order of preference\n    const configs = [\n        // Configuration with meeting tokens (preferred)\n        {\n            name: roomName,\n            privacy: 'private',\n            properties: {\n                max_participants: 2,\n                enable_knocking: false,\n                enable_screenshare: true,\n                enable_chat: true,\n                exp: Math.floor(expirationTime.getTime() / 1000) // Set room expiration\n            }\n        },\n        // Minimal configuration\n        {\n            name: roomName,\n            privacy: 'private',\n            properties: {\n                max_participants: 2,\n                exp: Math.floor(expirationTime.getTime() / 1000) // Set room expiration\n            }\n        },\n        // Even more minimal\n        {\n            name: roomName,\n            privacy: 'private',\n            properties: {\n                exp: Math.floor(expirationTime.getTime() / 1000) // Set room expiration\n            }\n        },\n        // Absolute minimal\n        {\n            name: roomName,\n            properties: {\n                exp: Math.floor(expirationTime.getTime() / 1000) // Set room expiration\n            }\n        }\n    ];\n    let lastError = null;\n    for(let i = 0; i < configs.length; i++){\n        const roomConfig = configs[i];\n        try {\n            console.log(`üîç Creating Daily.co room (attempt ${i + 1}):`, roomConfig);\n            const response = await fetch(`${DAILY_API_URL}/rooms`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${DAILY_API_KEY}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(roomConfig)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(`‚ùå Daily.co API error (attempt ${i + 1}):`, response.status, errorText);\n                // Try to parse the error for more specific handling\n                let errorMessage = `Daily.co API error: ${response.status}`;\n                try {\n                    const errorData = JSON.parse(errorText);\n                    if (errorData.info) {\n                        errorMessage += ` - ${errorData.info}`;\n                    }\n                } catch  {\n                    errorMessage += ` - ${errorText}`;\n                }\n                lastError = new Error(errorMessage);\n                continue; // Try next configuration\n            }\n            const roomData = await response.json();\n            console.log(`‚úÖ Daily.co room created successfully (attempt ${i + 1}):`, roomData);\n            console.log('üé• Daily.co room created with 30-minute duration for therapy session');\n            return {\n                id: roomData.id,\n                name: roomData.name,\n                url: roomData.url,\n                created_at: roomData.created_at,\n                config: roomData.config\n            };\n        } catch (error) {\n            console.error(`‚ùå Failed to create Daily.co room (attempt ${i + 1}):`, error);\n            lastError = error instanceof Error ? error : new Error('Unknown error');\n            continue; // Try next configuration\n        }\n    }\n    // If we get here, all configurations failed\n    console.error('‚ùå All Daily.co room creation attempts failed');\n    throw new Error(`Failed to create video room after ${configs.length} attempts: ${lastError?.message || 'Unknown error'}`);\n}\nasync function deleteDailyRoom(roomName) {\n    if (!DAILY_API_KEY) {\n        throw new Error('DAILY_API_KEY is not configured');\n    }\n    try {\n        const response = await fetch(`${DAILY_API_URL}/rooms/${roomName}`, {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Bearer ${DAILY_API_KEY}`\n            }\n        });\n        if (!response.ok) {\n            console.warn('‚ö†Ô∏è Failed to delete Daily.co room:', response.status);\n        } else {\n            console.log('‚úÖ Daily.co room deleted successfully');\n        }\n    } catch (error) {\n        console.error('‚ùå Error deleting Daily.co room:', error);\n    }\n}\nasync function getRoomInfo(roomName) {\n    if (!DAILY_API_KEY) {\n        throw new Error('DAILY_API_KEY is not configured');\n    }\n    try {\n        const response = await fetch(`${DAILY_API_URL}/rooms/${roomName}`, {\n            headers: {\n                'Authorization': `Bearer ${DAILY_API_KEY}`\n            }\n        });\n        if (!response.ok) {\n            if (response.status === 404) {\n                return null;\n            }\n            throw new Error(`Daily.co API error: ${response.status}`);\n        }\n        const roomData = await response.json();\n        return roomData;\n    } catch (error) {\n        console.error('‚ùå Error fetching room info:', error);\n        return null;\n    }\n}\n// Helper function to generate meeting tokens (for enhanced security)\nasync function createMeetingToken(roomName, userName, isOwner = false) {\n    if (!DAILY_API_KEY) {\n        throw new Error('DAILY_API_KEY is not configured');\n    }\n    const tokenConfig = {\n        properties: {\n            room_name: roomName,\n            user_name: userName,\n            is_owner: isOwner,\n            exp: Math.floor((Date.now() + 24 * 60 * 60 * 1000) / 1000)\n        }\n    };\n    try {\n        console.log('üîç Creating meeting token with config:', tokenConfig);\n        const response = await fetch(`${DAILY_API_URL}/meeting-tokens`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${DAILY_API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(tokenConfig)\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('‚ùå Daily.co token API error:', response.status, errorText);\n            throw new Error(`Daily.co token API error: ${response.status} - ${errorText}`);\n        }\n        const tokenData = await response.json();\n        console.log('‚úÖ Meeting token created successfully:', tokenData.token ? 'Token received' : 'No token in response');\n        return tokenData.token;\n    } catch (error) {\n        console.error('‚ùå Failed to create meeting token:', error);\n        throw new Error(`Failed to create meeting token: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n// Export aliases for the missing functions\nconst generateMeetingToken = createMeetingToken;\nasync function startSessionRecording(roomName) {\n    if (!DAILY_API_KEY) {\n        return {\n            success: false,\n            error: 'DAILY_API_KEY is not configured'\n        };\n    }\n    try {\n        const response = await fetch(`${DAILY_API_URL}/recordings`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${DAILY_API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                room_name: roomName,\n                start_recording: true\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('‚ùå Daily.co recording API error:', response.status, errorText);\n            return {\n                success: false,\n                error: `Daily.co recording API error: ${response.status} - ${errorText}`\n            };\n        }\n        const data = await response.json();\n        console.log('‚úÖ Session recording started successfully');\n        return {\n            success: true,\n            recordingId: data.id\n        };\n    } catch (error) {\n        console.error('‚ùå Failed to start session recording:', error);\n        return {\n            success: false,\n            error: `Failed to start session recording: ${error instanceof Error ? error.message : 'Unknown error'}`\n        };\n    }\n}\nasync function stopSessionRecording(roomName) {\n    if (!DAILY_API_KEY) {\n        return {\n            success: false,\n            error: 'DAILY_API_KEY is not configured'\n        };\n    }\n    try {\n        const response = await fetch(`${DAILY_API_URL}/recordings`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${DAILY_API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                room_name: roomName,\n                stop_recording: true\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('‚ùå Daily.co recording API error:', response.status, errorText);\n            return {\n                success: false,\n                error: `Daily.co recording API error: ${response.status} - ${errorText}`\n            };\n        }\n        const data = await response.json();\n        console.log('‚úÖ Session recording stopped successfully');\n        return {\n            success: true,\n            recordingUrl: data.url\n        };\n    } catch (error) {\n        console.error('‚ùå Failed to stop session recording:', error);\n        return {\n            success: false,\n            error: `Failed to stop session recording: ${error instanceof Error ? error.message : 'Unknown error'}`\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/daily.ts\n");

/***/ })

};
;