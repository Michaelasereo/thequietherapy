"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_availability-manager_ts";
exports.ids = ["_rsc_lib_availability-manager_ts"];
exports.modules = {

/***/ "(rsc)/./lib/availability-manager.ts":
/*!*************************************!*\
  !*** ./lib/availability-manager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvailabilityManager: () => (/* binding */ AvailabilityManager),\n/* harmony export */   availabilityManager: () => (/* binding */ availabilityManager),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n\nclass AvailabilityManager {\n    // =============================================\n    // AVAILABILITY RETRIEVAL\n    // =============================================\n    /**\n   * Get therapist weekly availability (single source of truth)\n   */ async getTherapistAvailability(therapistId) {\n        try {\n            console.log(`üîç Fetching availability for therapist: ${therapistId}`);\n            const { data, error } = await this.supabase.from('availability_weekly_schedules').select('weekly_availability').eq('therapist_id', therapistId).eq('is_active', true).single();\n            if (error) {\n                if (error.code === 'PGRST116') {\n                    console.log(`‚ö†Ô∏è No weekly availability found for therapist ${therapistId}`);\n                    return null;\n                }\n                console.error('‚ùå Error fetching weekly availability:', error);\n                throw new Error(`Failed to fetch availability: ${error.message}`);\n            }\n            return data?.weekly_availability || null;\n        } catch (error) {\n            console.error('‚ùå Error getting therapist availability:', error);\n            throw error;\n        }\n    }\n    /**\n   * Get available time slots for a specific date\n   */ async getAvailableSlots(therapistId, date) {\n        try {\n            console.log(`üìÖ Getting available slots for therapist ${therapistId} on ${date}`);\n            // 1. Get weekly availability\n            const weeklyAvailability = await this.getTherapistAvailability(therapistId);\n            if (!weeklyAvailability) {\n                console.log(`‚ùå No availability configured for therapist ${therapistId}`);\n                return [];\n            }\n            // 2. Get day of week\n            const dayOfWeek = new Date(date).getDay();\n            const dayNames = [\n                'sunday',\n                'monday',\n                'tuesday',\n                'wednesday',\n                'thursday',\n                'friday',\n                'saturday'\n            ];\n            const dayName = dayNames[dayOfWeek];\n            // 3. Check for date-specific overrides\n            const overrides = await this.getAvailabilityOverrides(therapistId, date);\n            // 4. Generate slots based on weekly schedule and overrides\n            let availableSlots = this.generateSlotsFromWeeklySchedule(weeklyAvailability, dayName, date);\n            // 5. Apply overrides\n            if (overrides.length > 0) {\n                availableSlots = this.applyOverrides(availableSlots, overrides);\n            }\n            // 6. Remove already booked slots\n            const bookedSlots = await this.getBookedSlots(therapistId, date);\n            availableSlots = this.removeBookedSlots(availableSlots, bookedSlots);\n            // 7. Filter out past slots\n            availableSlots = this.filterPastSlots(availableSlots);\n            console.log(`‚úÖ Found ${availableSlots.length} available slots for ${date}`);\n            return availableSlots;\n        } catch (error) {\n            console.error('‚ùå Error getting available slots:', error);\n            throw error;\n        }\n    }\n    /**\n   * Get available dates for a therapist in a month\n   */ async getAvailableDays(therapistId, month, year) {\n        try {\n            const availableDays = [];\n            const daysInMonth = new Date(year, month, 0).getDate();\n            // Check each day of the month\n            for(let day = 1; day <= daysInMonth; day++){\n                const date = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n                const slots = await this.getAvailableSlots(therapistId, date);\n                if (slots.length > 0) {\n                    availableDays.push(date);\n                }\n            }\n            return availableDays;\n        } catch (error) {\n            console.error('‚ùå Error getting available days:', error);\n            throw error;\n        }\n    }\n    // =============================================\n    // AVAILABILITY MANAGEMENT\n    // =============================================\n    /**\n   * Update therapist weekly availability\n   */ async updateWeeklyAvailability(therapistId, availability) {\n        try {\n            console.log(`üíæ Updating weekly availability for therapist: ${therapistId}`);\n            // Validate availability data\n            this.validateWeeklyAvailability(availability);\n            const { error } = await this.supabase.from('availability_weekly_schedules').upsert({\n                therapist_id: therapistId,\n                template_name: 'primary',\n                weekly_availability: availability,\n                is_active: true,\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'therapist_id,template_name'\n            });\n            if (error) {\n                console.error('‚ùå Error updating weekly availability:', error);\n                throw new Error(`Failed to update availability: ${error.message}`);\n            }\n            console.log(`‚úÖ Weekly availability updated for therapist ${therapistId}`);\n        } catch (error) {\n            console.error('‚ùå Error updating weekly availability:', error);\n            throw error;\n        }\n    }\n    /**\n   * Add availability override for specific date\n   */ async addAvailabilityOverride(therapistId, date, overrideType, startTime, endTime, reason) {\n        try {\n            console.log(`üö´ Adding availability override for therapist ${therapistId} on ${date}`);\n            const { error } = await this.supabase.from('availability_overrides').insert({\n                therapist_id: therapistId,\n                override_date: date,\n                override_type: overrideType,\n                start_time: startTime,\n                end_time: endTime,\n                reason: reason,\n                is_active: true\n            });\n            if (error) {\n                console.error('‚ùå Error adding availability override:', error);\n                throw new Error(`Failed to add override: ${error.message}`);\n            }\n            console.log(`‚úÖ Availability override added for ${date}`);\n        } catch (error) {\n            console.error('‚ùå Error adding availability override:', error);\n            throw error;\n        }\n    }\n    /**\n   * Remove availability override\n   */ async removeAvailabilityOverride(overrideId) {\n        try {\n            const { error } = await this.supabase.from('availability_overrides').update({\n                is_active: false\n            }).eq('id', overrideId);\n            if (error) {\n                console.error('‚ùå Error removing availability override:', error);\n                throw new Error(`Failed to remove override: ${error.message}`);\n            }\n            console.log(`‚úÖ Availability override removed: ${overrideId}`);\n        } catch (error) {\n            console.error('‚ùå Error removing availability override:', error);\n            throw error;\n        }\n    }\n    // =============================================\n    // CONFLICT DETECTION\n    // =============================================\n    /**\n   * Check if a time slot is available for booking\n   */ async isSlotAvailable(therapistId, date, startTime, duration) {\n        try {\n            const conflicts = [];\n            // 1. Check if therapist is active and verified\n            const therapistStatus = await this.getTherapistStatus(therapistId);\n            if (therapistStatus !== 'active') {\n                conflicts.push({\n                    type: 'unavailable_time',\n                    message: 'Therapist is not available for bookings'\n                });\n                return {\n                    available: false,\n                    conflicts\n                };\n            }\n            // 2. Check weekly availability\n            const weeklyAvailability = await this.getTherapistAvailability(therapistId);\n            if (!weeklyAvailability) {\n                conflicts.push({\n                    type: 'unavailable_time',\n                    message: 'No availability configured for this therapist'\n                });\n                return {\n                    available: false,\n                    conflicts\n                };\n            }\n            // 3. Check if time falls within available hours\n            const dayOfWeek = new Date(date).getDay();\n            const dayNames = [\n                'sunday',\n                'monday',\n                'tuesday',\n                'wednesday',\n                'thursday',\n                'friday',\n                'saturday'\n            ];\n            const dayName = dayNames[dayOfWeek];\n            const dayAvailability = weeklyAvailability.standardHours[dayName];\n            if (!dayAvailability || !dayAvailability.enabled) {\n                conflicts.push({\n                    type: 'unavailable_time',\n                    message: 'Therapist is not available on this day'\n                });\n                return {\n                    available: false,\n                    conflicts\n                };\n            }\n            // 4. Check time slot availability\n            const isTimeAvailable = this.isTimeWithinAvailability(startTime, duration, dayAvailability);\n            if (!isTimeAvailable) {\n                conflicts.push({\n                    type: 'unavailable_time',\n                    message: 'Time slot is not within therapist availability'\n                });\n                return {\n                    available: false,\n                    conflicts\n                };\n            }\n            // 5. Check for overrides\n            const overrides = await this.getAvailabilityOverrides(therapistId, date);\n            const overrideConflict = this.checkOverrideConflicts(startTime, duration, overrides);\n            if (overrideConflict) {\n                conflicts.push(overrideConflict);\n                return {\n                    available: false,\n                    conflicts\n                };\n            }\n            // 6. Check for existing bookings\n            const existingBookings = await this.getBookedSlots(therapistId, date);\n            const bookingConflict = this.checkBookingConflicts(startTime, duration, existingBookings);\n            if (bookingConflict) {\n                conflicts.push(bookingConflict);\n                return {\n                    available: false,\n                    conflicts\n                };\n            }\n            return {\n                available: true,\n                conflicts\n            };\n        } catch (error) {\n            console.error('‚ùå Error checking slot availability:', error);\n            throw error;\n        }\n    }\n    // =============================================\n    // HELPER METHODS\n    // =============================================\n    /**\n   * Get therapist status\n   */ async getTherapistStatus(therapistId) {\n        try {\n            const { data, error } = await this.supabase.from('therapist_states').select('current_status').eq('therapist_id', therapistId).order('status_changed_at', {\n                ascending: false\n            }).limit(1).single();\n            if (error || !data) {\n                return 'inactive';\n            }\n            return data.current_status;\n        } catch (error) {\n            console.error('‚ùå Error getting therapist status:', error);\n            return 'inactive';\n        }\n    }\n    /**\n   * Get availability overrides for a specific date\n   */ async getAvailabilityOverrides(therapistId, date) {\n        const { data } = await this.supabase.from('availability_overrides').select('*').eq('therapist_id', therapistId).eq('override_date', date).eq('is_active', true);\n        return data || [];\n    }\n    /**\n   * Get booked slots for a specific date\n   */ async getBookedSlots(therapistId, date) {\n        const { data } = await this.supabase.from('sessions').select('scheduled_time, duration_minutes').eq('therapist_id', therapistId).eq('scheduled_date', date).in('status', [\n            'scheduled',\n            'confirmed',\n            'in_progress'\n        ]);\n        return data || [];\n    }\n    /**\n   * Generate slots from weekly schedule\n   */ generateSlotsFromWeeklySchedule(weeklyAvailability, dayName, date) {\n        const slots = [];\n        const dayAvailability = weeklyAvailability.standardHours[dayName];\n        if (!dayAvailability || !dayAvailability.enabled) {\n            return slots;\n        }\n        const sessionDuration = weeklyAvailability.sessionSettings?.sessionDuration || 60;\n        // Use generalHours if available (new format)\n        if (dayAvailability.generalHours) {\n            const { start, end } = dayAvailability.generalHours;\n            const generatedSlots = this.generateTimeSlots(start, end, sessionDuration, date);\n            slots.push(...generatedSlots);\n        } else if (dayAvailability.timeSlots) {\n            // Fallback to timeSlots (old format)\n            for (const timeSlot of dayAvailability.timeSlots){\n                if (timeSlot.type === 'available') {\n                    const generatedSlots = this.generateTimeSlots(timeSlot.start, timeSlot.end, sessionDuration, date);\n                    slots.push(...generatedSlots);\n                }\n            }\n        }\n        return slots;\n    }\n    /**\n   * Generate time slots within a time range\n   */ generateTimeSlots(startTime, endTime, duration, date) {\n        const slots = [];\n        const start = new Date(`${date}T${startTime}`);\n        const end = new Date(`${date}T${endTime}`);\n        let current = new Date(start);\n        while(current < end){\n            const slotEnd = new Date(current.getTime() + duration * 60000);\n            if (slotEnd <= end) {\n                const timeString = current.toTimeString().slice(0, 5);\n                const endTimeString = slotEnd.toTimeString().slice(0, 5);\n                slots.push({\n                    date: date,\n                    day_of_week: new Date(date).getDay(),\n                    start_time: timeString,\n                    end_time: endTimeString,\n                    session_duration: duration,\n                    session_type: 'individual',\n                    max_sessions: 1,\n                    is_available: true\n                });\n            }\n            current = new Date(slotEnd.getTime());\n        }\n        return slots;\n    }\n    /**\n   * Apply availability overrides to slots\n   */ applyOverrides(slots, overrides) {\n        for (const override of overrides){\n            if (override.override_type === 'unavailable') {\n                // Remove all slots for this date\n                return [];\n            } else if (override.override_type === 'custom_hours') {\n                // Filter slots to only include those within custom hours\n                slots = slots.filter((slot)=>slot.start_time >= override.start_time && slot.end_time <= override.end_time);\n            }\n        }\n        return slots;\n    }\n    /**\n   * Remove booked slots from available slots\n   */ removeBookedSlots(slots, bookedSlots) {\n        return slots.filter((slot)=>{\n            return !bookedSlots.some((booked)=>booked.scheduled_time === slot.start_time);\n        });\n    }\n    /**\n   * Filter out past time slots\n   */ filterPastSlots(slots) {\n        const now = new Date();\n        const currentTime = now.toTimeString().slice(0, 5);\n        const today = now.toISOString().slice(0, 10);\n        return slots.filter((slot)=>{\n            if (slot.date < today) return false;\n            if (slot.date === today && slot.start_time <= currentTime) return false;\n            return true;\n        });\n    }\n    /**\n   * Check if time is within availability\n   */ isTimeWithinAvailability(startTime, duration, dayAvailability) {\n        const endTime = this.addMinutesToTime(startTime, duration);\n        // Check generalHours first\n        if (dayAvailability.generalHours) {\n            const { start, end } = dayAvailability.generalHours;\n            return startTime >= start && endTime <= end;\n        }\n        // Check timeSlots\n        if (dayAvailability.timeSlots) {\n            return dayAvailability.timeSlots.some((slot)=>slot.type === 'available' && startTime >= slot.start && endTime <= slot.end);\n        }\n        return false;\n    }\n    /**\n   * Check override conflicts\n   */ checkOverrideConflicts(startTime, duration, overrides) {\n        const endTime = this.addMinutesToTime(startTime, duration);\n        for (const override of overrides){\n            if (override.override_type === 'unavailable') {\n                return {\n                    type: 'unavailable_time',\n                    message: `Therapist is unavailable on this date: ${override.reason || 'No reason provided'}`\n                };\n            } else if (override.override_type === 'custom_hours') {\n                if (startTime < override.start_time || endTime > override.end_time) {\n                    return {\n                        type: 'unavailable_time',\n                        message: `Time slot is outside custom availability hours (${override.start_time} - ${override.end_time})`\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n   * Check booking conflicts\n   */ checkBookingConflicts(startTime, duration, bookedSlots) {\n        const endTime = this.addMinutesToTime(startTime, duration);\n        for (const booked of bookedSlots){\n            const bookedEnd = this.addMinutesToTime(booked.scheduled_time, booked.duration_minutes || 60);\n            if (startTime < bookedEnd && endTime > booked.scheduled_time) {\n                return {\n                    type: 'double_booking',\n                    message: `Time slot conflicts with existing booking (${booked.scheduled_time})`\n                };\n            }\n        }\n        return null;\n    }\n    /**\n   * Add minutes to time string\n   */ addMinutesToTime(timeString, minutes) {\n        const [hours, mins] = timeString.split(':').map(Number);\n        const totalMinutes = hours * 60 + mins + minutes;\n        const newHours = Math.floor(totalMinutes / 60);\n        const newMins = totalMinutes % 60;\n        return `${newHours.toString().padStart(2, '0')}:${newMins.toString().padStart(2, '0')}`;\n    }\n    /**\n   * Validate weekly availability data\n   */ validateWeeklyAvailability(availability) {\n        if (!availability.standardHours) {\n            throw new Error('standardHours is required');\n        }\n        const dayNames = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        for (const dayName of dayNames){\n            const dayAvailability = availability.standardHours[dayName];\n            if (dayAvailability && dayAvailability.enabled) {\n                if (dayAvailability.generalHours) {\n                    const { start, end } = dayAvailability.generalHours;\n                    if (start >= end) {\n                        throw new Error(`Invalid time range for ${dayName}: start time must be before end time`);\n                    }\n                }\n            }\n        }\n    }\n    constructor(){\n        this.supabase = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase;\n    }\n}\n// Export singleton instance\nconst availabilityManager = new AvailabilityManager();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (availabilityManager);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/availability-manager.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerClient: () => (/* binding */ createServerClient),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n// Client-side Supabase client with real-time disabled to prevent WebSocket errors\nconst supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(supabaseUrl, supabaseAnonKey, {\n    realtime: {\n        enabled: false\n    }\n});\n// Server-side Supabase client with service role key\nconst createServerClient = ()=>{\n    const serverSupabaseUrl = \"https://frzciymslvpohhyefmtr.supabase.co\" || 0;\n    // Use anon key as fallback if service role key is invalid\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyenNjaXltc2x2cG9oaHllZm10ciIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzU0NzA4NDgyLCJleHAiOjIwNzAyODQ0ODJ9.y_CSv6rhYngCDvSe9Z6NuEPzPLgBV_huXq5f3WbGiLM\" || 0;\n    console.log('üîç createServerClient: Service role key exists:', !!serviceRoleKey);\n    console.log('üîç createServerClient: Service role key length:', serviceRoleKey?.length);\n    console.log('üîç createServerClient: Anon key length:', anonKey?.length);\n    // Use service role key if available, otherwise fallback to anon key\n    const serverSupabaseKey = serviceRoleKey || anonKey;\n    console.log('üîç createServerClient: Using key type:', serviceRoleKey ? 'service_role' : 'anon');\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(serverSupabaseUrl, serverSupabaseKey, {\n        auth: {\n            persistSession: false\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;