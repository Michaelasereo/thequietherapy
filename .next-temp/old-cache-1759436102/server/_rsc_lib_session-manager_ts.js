"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_session-manager_ts";
exports.ids = ["_rsc_lib_session-manager_ts"];
exports.modules = {

/***/ "(rsc)/./lib/session-manager.ts":
/*!********************************!*\
  !*** ./lib/session-manager.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/sign.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n\n\nconst JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || 'trpi-super-secret-key-2024-therapy-platform');\nclass SessionManager {\n    static{\n        this.COOKIE_NAME = 'quiet_session';\n    }\n    static{\n        this.MAX_AGE = 24 * 60 * 60 * 1000 // 24 hours (healthcare-grade security)\n        ;\n    }\n    static{\n        this.REFRESH_WINDOW = 6 * 60 * 60 * 1000 // Refresh if < 6 hours left\n        ;\n    }\n    static{\n        this.GRACE_PERIOD = 30 * 60 * 1000 // 30 minutes grace after expiry\n        ;\n    }\n    static{\n        this.ABSOLUTE_MAX_AGE = 30 * 24 * 60 * 60 * 1000 // 30 days absolute maximum\n        ;\n    }\n    /**\n   * Create a new session and set the cookie\n   */ static async createSession(sessionData) {\n        const token = await new jose__WEBPACK_IMPORTED_MODULE_2__.SignJWT(sessionData).setProtectedHeader({\n            alg: 'HS256'\n        }).setIssuedAt().setExpirationTime('24h') // Healthcare-grade: 24 hours\n        .sign(JWT_SECRET);\n        // Set the cookie\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n        cookieStore.set(this.COOKIE_NAME, token, {\n            httpOnly: true,\n            secure: \"development\" === 'production',\n            sameSite: 'lax',\n            maxAge: this.MAX_AGE,\n            path: '/'\n        });\n        return token;\n    }\n    /**\n   * Get the current session from the cookie\n   */ static async getSession() {\n        try {\n            const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n            const token = cookieStore.get(this.COOKIE_NAME)?.value;\n            if (!token) {\n                console.log('üîç No session cookie found');\n                return null;\n            }\n            console.log('üç™ Raw cookie value:', token.substring(0, 50) + '...');\n            const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, JWT_SECRET);\n            const sessionData = payload;\n            // Basic validation\n            if (!sessionData.id || !sessionData.email) {\n                console.error('‚ùå Invalid session data structure');\n                return null;\n            }\n            console.log('‚úÖ Session validated for user:', sessionData.email);\n            return sessionData;\n        } catch (error) {\n            // Distinguish between expired and invalid tokens\n            if (error?.code === 'ERR_JWT_EXPIRED' || error?.message?.includes('exp')) {\n                console.log('‚è∞ Session token expired');\n            } else {\n                console.error('‚ùå Session retrieval error:', error);\n            }\n            return null;\n        }\n    }\n    /**\n   * Get session with automatic refresh if nearing expiration\n   */ static async getSessionWithRefresh() {\n        try {\n            const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n            const token = cookieStore.get(this.COOKIE_NAME)?.value;\n            if (!token) {\n                console.log('üîç No session cookie found');\n                return null;\n            }\n            try {\n                const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, JWT_SECRET);\n                const sessionData = payload;\n                // Check if token is nearing expiration (less than 6 hours remaining)\n                const expiryTime = (payload.exp || 0) * 1000;\n                const timeUntilExpiry = expiryTime - Date.now();\n                if (timeUntilExpiry < this.REFRESH_WINDOW && timeUntilExpiry > 0) {\n                    console.log('üîÑ Session nearing expiration, refreshing...');\n                    // Refresh the session\n                    await this.createSession(sessionData);\n                    console.log('‚úÖ Session refreshed successfully');\n                }\n                return sessionData;\n            } catch (error) {\n                // If token is expired but within grace period (30 minutes), allow refresh\n                if (error?.code === 'ERR_JWT_EXPIRED' || error?.message?.includes('exp')) {\n                    console.log('‚è∞ Token expired, checking if within grace period...');\n                    try {\n                        // Decode without verification to check expiry time\n                        const decoded = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n                        const expiryTime = decoded.exp * 1000;\n                        const timeSinceExpiry = Date.now() - expiryTime;\n                        // Allow refresh if expired less than 30 minutes ago (grace period)\n                        if (timeSinceExpiry < this.GRACE_PERIOD && timeSinceExpiry > 0) {\n                            console.log('‚úÖ Within 30-minute grace period, refreshing session...');\n                            const sessionData = decoded;\n                            await this.createSession(sessionData);\n                            return sessionData;\n                        } else {\n                            console.log('‚ùå Expired beyond grace period, cannot refresh');\n                        }\n                    } catch (decodeError) {\n                        console.error('‚ùå Error decoding expired token:', decodeError);\n                    }\n                }\n                console.error('‚ùå Session retrieval error:', error);\n                return null;\n            }\n        } catch (error) {\n            console.error('‚ùå Session refresh error:', error);\n            return null;\n        }\n    }\n    /**\n   * Get session from request (for API routes)\n   */ static async getSessionFromRequest(request) {\n        try {\n            const sessionCookie = request.cookies.get(this.COOKIE_NAME)?.value;\n            if (!sessionCookie) {\n                console.log('üîç No session cookie found');\n                return null;\n            }\n            console.log('üç™ Raw cookie value:', sessionCookie.substring(0, 50) + '...');\n            // Verify JWT token\n            const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(sessionCookie, JWT_SECRET);\n            const sessionData = payload;\n            // Basic validation\n            if (!sessionData.id || !sessionData.email) {\n                console.error('‚ùå Invalid session data structure');\n                return null;\n            }\n            console.log('‚úÖ Session found for user:', sessionData.email);\n            return sessionData;\n        } catch (error) {\n            console.error('‚ùå Session retrieval error:', error);\n            return null;\n        }\n    }\n    /**\n   * Clear the session cookie\n   */ static async clearSession() {\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n        cookieStore.delete(this.COOKIE_NAME);\n    }\n    /**\n   * Clear expired session cookie from request\n   */ static async clearExpiredSession(request) {\n        const token = request.cookies.get(this.COOKIE_NAME)?.value;\n        if (token) {\n            try {\n                await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, JWT_SECRET);\n            } catch (error) {\n                // Token is expired or invalid, clear it\n                if (error instanceof Error && error.message.includes('exp')) {\n                    const response = next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n                    response.cookies.delete(this.COOKIE_NAME);\n                    return;\n                }\n            }\n        }\n    }\n    /**\n   * Update session data (useful for profile updates)\n   */ static async updateSession(updates) {\n        const currentSession = await this.getSession();\n        if (!currentSession) {\n            return null;\n        }\n        const updatedSession = {\n            ...currentSession,\n            ...updates\n        };\n        await this.createSession(updatedSession);\n        return updatedSession;\n    }\n    /**\n   * Check if user has specific role\n   */ static async hasRole(role) {\n        const session = await this.getSession();\n        return session?.role === role;\n    }\n    /**\n   * Require specific role (throws if not authorized)\n   */ static async requireRole(role) {\n        const session = await this.getSession();\n        if (!session || session.role !== role) {\n            throw new Error(`Access denied. Required role: ${role}`);\n        }\n        return session;\n    }\n}\n/**\n * Middleware helper for API routes\n */ async function requireAuth(requiredRole) {\n    return async (request)=>{\n        const session = await SessionManager.getSessionFromRequest(request);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n                error: 'Authentication required'\n            }, {\n                status: 401\n            });\n        }\n        if (requiredRole && session.role !== requiredRole) {\n            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n                error: `Access denied. Required role: ${requiredRole}`\n            }, {\n                status: 403\n            });\n        }\n        return {\n            session\n        };\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/session-manager.ts\n");

/***/ })

};
;